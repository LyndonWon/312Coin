
==================== FINAL INTERFACE ====================
2017-11-24 21:19:30.985301 UTC

interface 312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA:Lib [family instance module] 8002
  interface hash: 084709c9f3e016d7ba593836392e32df
  ABI hash: a9788e59e87cc4524c2aa9198b52c50f
  export-list hash: 171f01b34c0861fc6128c4004e20260e
  orphan hash: 41a88d3f4808f2b0a90b45008cd7f45b
  flag hash: c3b9198a5914f04c318c3e523cd07cbc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.calculateBlockHash
  Lib.difficultyTarget
  Lib.epoch
  Lib.findNonce
  Lib.hashString
  Lib.initialBlock
  Lib.isValidChain
  Lib.isValidNewBlock
  Lib.mineBlockFrom
  Lib.satisfiesPow
  Lib.setBlockHash
  Lib.setNonceAndHash
  Lib.sha256
  Lib.Block{Lib.Block blockData blockHash index nonce previousHash timestamp}
module dependencies:
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ
                      binary-0.8.3.0@binary-0.8.3.0
                      byteable-0.1.1@byteable-0.1.1-2lU1pexQSLj1KbNO17UifQ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp
                      cryptonite-0.23@cryptonite-0.23-B2QruyompNMGbr9rx9h1sv
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      memory-0.14.8@memory-0.14.8-5gChKptja3L48mJBRibgYj
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.BoxedArray
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Monad
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.MutableBuilder
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Nat
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.NonEmpty
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Numerical.Subtractive
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ASCII7
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF16
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF32
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.AsciiString
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.OffsetSize
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UTF8.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Bitmap
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Chunked.Unboxed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Buildable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Element
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Keyed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Mutable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Tuple
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.FromJSON f51fffb1f8daae31daf33b152fc89c41
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary 68bf10cd9cced43ad785ce79fc9157c3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 04951c02f7879a7c7ead8468b2cdc233
import  -/  cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp:Crypto.Hash eec25ac3a304b361266044cc6dbf23e8
import  -/  cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp:Crypto.Hash.SHA256 c29bc6254962ca72cb6bc06bcb07388c
import  -/  cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp:Crypto.Hash.Types 73156657a9db39e8cb6ee76d176c4f61
import  -/  cryptonite-0.23@cryptonite-0.23-B2QruyompNMGbr9rx9h1sv:Crypto.Hash.SHA256 9968487e6a88f9a65ebc588ceadef977
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Trans d69bc2e104a90fb918d853b240f7af2e
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.POSIX ca9431d4d4936fe9d9df8e3106abfbce
0baef2da1b8a71b4f3cada96a625866a
  $fEqBlock :: GHC.Classes.Eq Lib.Block
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block Lib.$fEqBlock_$c== Lib.$fEqBlock_$c/= -}
0baef2da1b8a71b4f3cada96a625866a
  $fEqBlock_$c/= :: Lib.Block -> Lib.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLL),1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)><S(S(S)LLLLL),1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.Block) (b :: Lib.Block) ->
                 case Lib.$fEqBlock_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fEqBlock_$c== :: Lib.Block -> Lib.Block -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLLLL),1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)><S(S(S)LLLLL),1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Block) (w1 :: Lib.Block) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Types.I# ww8 ->
                 case w1 of ww9 { Lib.Block ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww10 of ww16 { GHC.Types.I# ww17 ->
                 Lib.$w$c==
                   ww8
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww17
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } } } }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock :: Data.Aeson.Types.FromJSON.FromJSON Lib.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block
                  Lib.$fFromJSONBlock_$cparseJSON
                  Lib.$fFromJSONBlock_$cparseJSONList -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock1 ::
    [Data.Aeson.Types.Internal.Parser Lib.Block]
    -> forall (f :: * -> *) r.
       Data.Aeson.Types.Internal.JSONPath
       -> Data.Aeson.Types.Internal.Failure f r
       -> Data.Aeson.Types.Internal.Success [Lib.Block] f r
       -> f r
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,C(U)> -}
9f493c2194c3b08859d8823405f35676
  $fFromJSONBlock2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "[a]"#) -}
8ef5abf415779cf85e4ba248521548ad
  $fFromJSONBlock3 ::
    Data.Aeson.Types.Internal.Options
    -> Data.Aeson.Types.FromJSON.FromArgs
         Data.Aeson.Types.Generic.Zero a1
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (GHC.Generics.M1
            GHC.Generics.D
            ('GHC.Generics.MetaData
               "Block"
               "Lib"
               "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"
               'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.C
               ('GHC.Generics.MetaCons
                  "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "index")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 GHC.Types.Int)
                 GHC.Generics.:*: (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "previousHash")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 GHC.Base.String)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "timestamp")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Int)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "blockData")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "nonce")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Int)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "blockHash")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Base.String)))))
            a1)
  {- Arity: 3, Strictness: <L,1*U(U,U,U,U,U,U)><L,U><L,1*U> -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Lib.Block
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          (GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "Block"
                                "Lib"
                                "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"
                                'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                ((GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "index")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Types.Int)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "previousHash")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Base.String)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "timestamp")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Types.Int)))
                                 GHC.Generics.:*: (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "blockData")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Base.String)
                                                   GHC.Generics.:*: (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just "nonce")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Types.Int)
                                                                     GHC.Generics.:*: GHC.Generics.S1
                                                                                        ('GHC.Generics.MetaSel
                                                                                           ('GHC.Base.Just
                                                                                              "blockHash")
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.Rec0
                                                                                           GHC.Base.String)))))
                             GHC.Prim.Any)
                   = Lib.$fFromJSONBlock3
                       @ GHC.Prim.Any
                       Data.Aeson.Types.Internal.defaultOptions
                       (Data.Aeson.Types.FromJSON.$WNoFromArgs @ GHC.Prim.Any)
                       x
                 } in
                 (\ @ (f4 :: * -> *)
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success Lib.Block f4 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       (Sub (Sym (Lib.Rep_Block[0])) <GHC.Prim.Any>_N))
                    @ f4
                    @ r
                    path
                    kf
                    (\ (a1 :: GHC.Generics.Rep Lib.Block GHC.Prim.Any) ->
                     ks (Lib.$fFromJSONBlock_$cto @ GHC.Prim.Any a1)))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0] <Lib.Block>_R))) -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Lib.Block]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.FromJSON.typeMismatch
                        @ [Lib.Block]
                        Lib.$fFromJSONBlock2
                        wild
                   Data.Aeson.Types.Internal.Array a1
                   -> case a1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      (Lib.$fFromJSONBlock1
                         (letrec {
                            $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww dt1) of wild2 {
                                GHC.Types.False
                                -> case GHC.Prim.indexArray#
                                          @ Data.Aeson.Types.Internal.Value
                                          dt2
                                          (GHC.Prim.+# dt ww) of ds1 { Unit# ipv ->
                                   GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv
                                     ($wgo (GHC.Prim.+# ww 1#)) }
                                GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                          } in
                          Lib.$fFromJSONBlock_go 0# ($wgo 0#)))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Lib.Block]>_R)) } }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock_$cto :: GHC.Generics.Rep Lib.Block x -> Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)S(LS)),1*U(1*U(U,1*U(U,U)),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Lib.Block x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Lib.Rep_Block[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Block"
                                        "Lib"
                                        "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "index")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                          GHC.Generics.:*: (GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "previousHash")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R GHC.Base.String)
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "timestamp")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  GHC.Types.Int)))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "blockData")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Base.String)
                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "nonce")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  GHC.Types.Int)
                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "blockHash")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   GHC.Base.String))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Block" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "index")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "previousHash")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R GHC.Base.String)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "timestamp")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               GHC.Types.Int)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "blockData")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R GHC.Base.String)
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "nonce")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               GHC.Types.Int)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "blockHash")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                GHC.Base.String)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds4 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds2 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 case ds8 of wild4 { GHC.Generics.:*: ds9 ds10 ->
                 Lib.Block
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "index")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "previousHash")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "timestamp")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds7
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "blockData")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                   ds9
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "nonce")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds10
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "blockHash")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P)) } } } } }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fFromJSONBlock_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> [Data.Aeson.Types.Internal.Parser Lib.Block]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
0baef2da1b8a71b4f3cada96a625866a
  $fGenericBlock :: GHC.Generics.Generic Lib.Block
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block Lib.$fGenericBlock_$cfrom Lib.$fFromJSONBlock_$cto -}
0baef2da1b8a71b4f3cada96a625866a
  $fGenericBlock1 ::
    Lib.Block
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "index")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
           GHC.Generics.:*: (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "previousHash")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "timestamp")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "blockData")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "nonce")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "blockHash")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    GHC.Base.String))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Lib.Block) ->
                 case x1 of wild { Lib.Block g1 g2 g3 g4 g5 g6 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "index")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "previousHash")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "timestamp")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Int)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "blockData")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "nonce")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "blockHash")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "index")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "previousHash")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "timestamp")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "index")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N))
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "previousHash")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "timestamp")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                          @ x
                          g2
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "previousHash")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                          g3
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "timestamp")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N))))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "blockData")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "nonce")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "blockHash")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                       @ x
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "blockData")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "nonce")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "blockHash")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                          @ x
                          g5
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "nonce")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N))
                          g6
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "blockHash")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1
                                            GHC.Generics.R GHC.Base.String>_R) <x>_N)))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Block" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "index")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                             GHC.Generics.:*: (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "previousHash")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "timestamp")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R GHC.Types.Int)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "blockData")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "nonce")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R GHC.Types.Int)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "blockHash")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      GHC.Base.String)))>_R) <x>_N) }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fGenericBlock_$cfrom :: Lib.Block -> GHC.Generics.Rep Lib.Block x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.$fGenericBlock1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Lib.Block>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Block"
                                       "Lib"
                                       "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "index")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "previousHash")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Base.String)
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "timestamp")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Types.Int)))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "blockData")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String)
                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "nonce")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Types.Int)
                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "blockHash")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  GHC.Base.String))))>_R))
                          (Sub (Sym (Lib.Rep_Block[0]))) <x>_N) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock :: GHC.Read.Read Lib.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block
                  Lib.$fReadBlock_$creadsPrec
                  Lib.$fReadBlock_$creadList
                  Lib.$fReadBlock_$creadPrec
                  Lib.$fReadBlock_$creadListPrec -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lib.Block] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lib.Block] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Lib.Block
                   Lib.$fReadBlock2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.Block>_R))
                   eta
                   @ b
                   eta1) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lib.Block
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Lib.Block
                   Lib.$fReadBlock3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Block>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lib.Block>_R)))) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lib.Block -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Lib.Block -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$creadPrec ww1 @ b w1 }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock4 :: Text.ParserCombinators.ReadP.P [Lib.Block]
  {- Unfolding: (GHC.Read.list1
                   @ Lib.Block
                   Lib.$fReadBlock2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.Block>_R))
                   GHC.Read.$fRead()5
                   @ [Lib.Block]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lib.Block])) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lib.Block]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lib.Block]
                   Lib.$fReadBlock4) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lib.Block]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadBlock1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Lib.Block]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lib.Block]>_R))) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lib.Block
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadBlock2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lib.Block>_R)) -}
0baef2da1b8a71b4f3cada96a625866a
  $fReadBlock_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Lib.Block
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lib.Block
                   ((GHC.Read.parens1
                       @ Lib.Block
                       Lib.$fReadBlock3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Block>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lib.Block>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Block>_R)
                      @ Lib.Block
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lib.Block))) -}
0baef2da1b8a71b4f3cada96a625866a
  $fShowBlock :: GHC.Show.Show Lib.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block
                  Lib.$fShowBlock_$cshowsPrec
                  Lib.$fShowBlock_$cshow
                  Lib.$fShowBlock_$cshowList -}
0baef2da1b8a71b4f3cada96a625866a
  $fShowBlock1 :: Lib.Block -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Block) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fShowBlock_$cshow :: Lib.Block -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Block) ->
                 Lib.$fShowBlock_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0baef2da1b8a71b4f3cada96a625866a
  $fShowBlock_$cshowList :: [Lib.Block] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Block Lib.$fShowBlock1) -}
0baef2da1b8a71b4f3cada96a625866a
  $fShowBlock_$cshowsPrec ::
    GHC.Types.Int -> Lib.Block -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Block)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Block ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock :: Data.Aeson.Types.ToJSON.ToJSON Lib.Block
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Block
                  Lib.$fToJSONBlock_$ctoJSON
                  Lib.$fToJSONBlock_$ctoEncoding
                  Lib.$fToJSONBlock_$ctoJSONList
                  Lib.$fToJSONBlock_$ctoEncodingList -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock1 ::
    Lib.Block
    -> Data.Tagged.Tagged
         Data.Aeson.Types.Generic.True Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Block) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Lib.$w$ctoJSON ww1 ww2 ww3 ww4 ww5 ww6 of ww7 { Unit# ww8 ->
                 (Data.Aeson.Types.Internal.Object ww8)
                   `cast`
                 (Sym (Data.Tagged.N:Tagged[0]
                           <*>_N
                           <Data.Aeson.Types.Generic.True>_P
                           <Data.Aeson.Types.Internal.Value>_R)) } }) -}
eef9d0c9add229576fd969511efd34f7
  $fToJSONBlock2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "blockHash"#) -}
63ca83a4e493ed907ec2cce8011fc1b7
  $fToJSONBlock3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "nonce"#) -}
ebf4e3373c15e5aeda3d9ccbe12835f8
  $fToJSONBlock4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "blockData"#) -}
8047e95db10ff349fda6a8548c14e713
  $fToJSONBlock5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "timestamp"#) -}
7a8cdf39b521913b577fa07a40e99687
  $fToJSONBlock6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "previousHash"#) -}
aa029099db55f60fa7659afa965b1264
  $fToJSONBlock7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "index"#) -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock_$ctoEncoding ::
    Lib.Block -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Lib.Block) ->
                 Data.Aeson.Encoding.Internal.value
                   (Lib.$fToJSONBlock_$ctoJSON eta)) -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock_$ctoEncodingList ::
    [Lib.Block] -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Lib.Block]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value (Lib.$fToJSONBlock_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Lib.Block
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Lib.Block)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Lib.$fToJSONBlock_$ctoJSON v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Lib.Block>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock_$ctoJSON ::
    Lib.Block -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),1*U)>m1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fToJSONBlock1
                  `cast`
                (<Lib.Block>_R
                 ->_R Data.Tagged.N:Tagged[0]
                          <*>_N
                          <Data.Aeson.Types.Generic.True>_P
                          <Data.Aeson.Types.Internal.Value>_R) -}
0baef2da1b8a71b4f3cada96a625866a
  $fToJSONBlock_$ctoJSONList ::
    [Lib.Block] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Lib.Block]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Lib.Block
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Lib.Block
                                       c
                                       Lib.$fToJSONBlock_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
e8ea8211d995092eddb908aba517ebbf
  $fToJSONBlock_w2 :: Data.Aeson.Types.Internal.Options
  {- Strictness: m,
     Unfolding: (Data.Aeson.Types.Internal.Options
                   (GHC.Base.id @ GHC.Base.String)
                   (GHC.Base.id @ GHC.Base.String)
                   GHC.Types.True
                   GHC.Types.False
                   Data.Aeson.Types.Internal.defaultTaggedObject
                   GHC.Types.False) -}
5800c72a5f49aa4bf82f11f4682bf37c
  $s$fFromJSON[] ::
    Data.Aeson.Types.FromJSON.FromJSON [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Data.Aeson.Types.FromJSON.$dmfromJSONKeyList_$cparseJSON
                     @ GHC.Types.Char
                     Data.Aeson.Types.FromJSON.$fFromJSONChar)
                  (Data.Aeson.Types.FromJSON.$fFromJSONKey[]_$cparseJSONList
                     @ GHC.Types.Char
                     Data.Aeson.Types.FromJSON.$fFromJSONChar) -}
d32139dba9d4828197becb012463a416
  $s$fSelectorMetaMetaSel ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "blockHash")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "blockHash")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "blockHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel1
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "blockHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel1
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "blockHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel1
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
9bb84ffdb562cec6098b78c6e2c9d07f
  $s$fSelectorMetaMetaSel1 ::
    GHC.Generics.SingI ('GHC.Base.Just "blockHash")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel2
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "blockHash">_N) -}
ddedb9a97f3eae1e6117c9a5163fb993
  $s$fSelectorMetaMetaSel10 ::
    GHC.Generics.R:SingMaybeb
      GHC.Types.Symbol ('GHC.Base.Just "blockData")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "blockData")
                   @ "blockData"
                   @~ <'GHC.Base.Just "blockData">_N
                   Lib.$s$fSelectorMetaMetaSel11
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"blockData">_N)) -}
26b5dd9c4c221d4b8debd4ae469c8b5a
  $s$fSelectorMetaMetaSel11 :: GHC.Generics.R:SingSymbols "blockData"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "blockData"
                   Lib.$fToJSONBlock4
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"blockData">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"blockData">_N))) -}
f6797a822a19d2019c4e2cdc3ca988c2
  $s$fSelectorMetaMetaSel12 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "timestamp")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "timestamp")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName3
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "timestamp")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel13
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "timestamp")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel13
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "timestamp")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel13
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
01c4b0beaf61c52ebe4e28c6545ee75c
  $s$fSelectorMetaMetaSel13 ::
    GHC.Generics.SingI ('GHC.Base.Just "timestamp")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel14
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "timestamp">_N) -}
6419f22e5a3a27637fd14d3990a079bf
  $s$fSelectorMetaMetaSel14 ::
    GHC.Generics.R:SingMaybeb
      GHC.Types.Symbol ('GHC.Base.Just "timestamp")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "timestamp")
                   @ "timestamp"
                   @~ <'GHC.Base.Just "timestamp">_N
                   Lib.$s$fSelectorMetaMetaSel15
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"timestamp">_N)) -}
b275beb973b7dabbb9c7648949e9ca7a
  $s$fSelectorMetaMetaSel15 :: GHC.Generics.R:SingSymbols "timestamp"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "timestamp"
                   Lib.$fToJSONBlock5
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"timestamp">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"timestamp">_N))) -}
0714fe66aaceb50ee5c20a9274b82893
  $s$fSelectorMetaMetaSel16 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "previousHash")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "previousHash")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName4
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "previousHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel17
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "previousHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel17
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "previousHash")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel17
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
9bfad226b7cdfbf31013d56149f0b933
  $s$fSelectorMetaMetaSel17 ::
    GHC.Generics.SingI ('GHC.Base.Just "previousHash")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel18
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "previousHash">_N) -}
2ec4706c3be96d25709d0680e572a471
  $s$fSelectorMetaMetaSel18 ::
    GHC.Generics.R:SingMaybeb
      GHC.Types.Symbol ('GHC.Base.Just "previousHash")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "previousHash")
                   @ "previousHash"
                   @~ <'GHC.Base.Just "previousHash">_N
                   Lib.$s$fSelectorMetaMetaSel19
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"previousHash">_N)) -}
0966693f956d05c32d94b38c5185b347
  $s$fSelectorMetaMetaSel19 ::
    GHC.Generics.R:SingSymbols "previousHash"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "previousHash"
                   Lib.$fToJSONBlock6
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"previousHash">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"previousHash">_N))) -}
aecd1865d8bac5406e293164e533ef36
  $s$fSelectorMetaMetaSel2 ::
    GHC.Generics.R:SingMaybeb
      GHC.Types.Symbol ('GHC.Base.Just "blockHash")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "blockHash")
                   @ "blockHash"
                   @~ <'GHC.Base.Just "blockHash">_N
                   Lib.$s$fSelectorMetaMetaSel3
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"blockHash">_N)) -}
73faff2265d1b65d6be6e9598a6b8423
  $s$fSelectorMetaMetaSel20 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "index")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "index")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName5
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "index")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel21
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "index")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel21
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "index")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel21
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
c610e44c061bc0e4f6e36da756675245
  $s$fSelectorMetaMetaSel21 ::
    GHC.Generics.SingI ('GHC.Base.Just "index")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel22
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "index">_N) -}
88751d1eab5d400c9d84ea2d194a29d6
  $s$fSelectorMetaMetaSel22 ::
    GHC.Generics.R:SingMaybeb GHC.Types.Symbol ('GHC.Base.Just "index")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "index")
                   @ "index"
                   @~ <'GHC.Base.Just "index">_N
                   Lib.$s$fSelectorMetaMetaSel23
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"index">_N)) -}
02f87b64a0c6b067ddf7ac5681bb8f03
  $s$fSelectorMetaMetaSel23 :: GHC.Generics.R:SingSymbols "index"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "index"
                   Lib.$fToJSONBlock7
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"index">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"index">_N))) -}
380d89fe8b644038f0069abfe2638e5d
  $s$fSelectorMetaMetaSel3 :: GHC.Generics.R:SingSymbols "blockHash"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "blockHash"
                   Lib.$fToJSONBlock2
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"blockHash">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"blockHash">_N))) -}
cad58ffc30bee739a7b01ae14caad6ad
  $s$fSelectorMetaMetaSel4 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "nonce")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "nonce")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName1
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "nonce")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel5
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "nonce")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel5
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "nonce")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel5
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
19970ae58505a6e040a41f4b9cdc13c9
  $s$fSelectorMetaMetaSel5 ::
    GHC.Generics.SingI ('GHC.Base.Just "nonce")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel6
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "nonce">_N) -}
e7112426b261211f065f9d82131491bb
  $s$fSelectorMetaMetaSel6 ::
    GHC.Generics.R:SingMaybeb GHC.Types.Symbol ('GHC.Base.Just "nonce")
  {- Unfolding: (GHC.Generics.SJust
                   @ GHC.Types.Symbol
                   @ ('GHC.Base.Just "nonce")
                   @ "nonce"
                   @~ <'GHC.Base.Just "nonce">_N
                   Lib.$s$fSelectorMetaMetaSel7
                     `cast`
                   (Sym (GHC.Generics.D:R:SingSymbols0[0]) <"nonce">_N)) -}
c343cdb8cd9393f1067ce77833b38944
  $s$fSelectorMetaMetaSel7 :: GHC.Generics.R:SingSymbols "nonce"
  {- Strictness: m,
     Unfolding: (GHC.Generics.SSym
                   @ "nonce"
                   Lib.$fToJSONBlock3
                     `cast`
                   (Trans
                        (Sym (GHC.TypeLits.N:SSymbol[0] <"nonce">_P))
                        (Sym (GHC.TypeLits.N:KnownSymbol[0]) <"nonce">_N))) -}
b3bb283208c20301e516701511c59a4b
  $s$fSelectorMetaMetaSel8 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "blockData")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "blockData")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName2
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceUnpackedness
                     @ ('GHC.Base.Just "blockData")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel9
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselSourceStrictness
                     @ ('GHC.Base.Just "blockData")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel9
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N))
                  (GHC.Generics.$fSelectorMetaMetaSel_$cselDecidedStrictness
                     @ ('GHC.Base.Just "blockData")
                     @ 'GHC.Generics.NoSourceUnpackedness
                     @ 'GHC.Generics.NoSourceStrictness
                     @ 'GHC.Generics.DecidedLazy
                     Lib.$s$fSelectorMetaMetaSel9
                     GHC.Generics.$WSNoSourceUnpackedness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceUnpackedness>_N <'GHC.Generics.NoSourceUnpackedness>_N)
                     GHC.Generics.$WSNoSourceStrictness
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.SourceStrictness>_N <'GHC.Generics.NoSourceStrictness>_N)
                     GHC.Generics.$WSDecidedLazy
                       `cast`
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Generics.DecidedStrictness>_N <'GHC.Generics.DecidedLazy>_N)) -}
f92a156e60cb11fe1b83108668c50e0d
  $s$fSelectorMetaMetaSel9 ::
    GHC.Generics.SingI ('GHC.Base.Just "blockData")
  {- Unfolding: InlineRule (0, True, True)
                Lib.$s$fSelectorMetaMetaSel10
                  `cast`
                (Trans
                     (Sym (GHC.Generics.D:R:SingMaybeb0[0] <GHC.Types.Symbol>_N))
                     (Sym (GHC.Generics.N:SingI[0]) <GHC.Base.Maybe
                                                       GHC.Types.Symbol>_N) <'GHC.Base.Just
                                                                               "blockData">_N) -}
b32686e32aaa6e4ee321012b2c451cf9
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "blockHash")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "blockHash")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock2) -}
d4abab54f2a05044b2cb19253046bf43
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName1 ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "nonce")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "nonce")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock3) -}
a4eca3c5e383c6d93ed4578abe01fe3a
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName2 ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "blockData")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "blockData")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock4) -}
c015c7d91015066fc921d12a7ab8dc8d
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName3 ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "timestamp")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "timestamp")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock5) -}
f2e1a28a878b7837c879c7d5b85701d7
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName4 ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "previousHash")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "previousHash")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock6) -}
2efba5a8f1e4a1f786ea589c100e48bd
  $s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName5 ::
    forall k (t :: GHC.Generics.Meta
                   -> (GHC.Types.* -> GHC.Types.*) -> k -> *) (f :: GHC.Types.*
                                                                    -> GHC.Types.*) (a :: k).
    t ('GHC.Generics.MetaSel
         ('GHC.Base.Just "index")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy) f a
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ (t :: GHC.Generics.Meta
                           -> (GHC.Types.* -> GHC.Types.*) -> k -> *)
                   @ (f :: GHC.Types.* -> GHC.Types.*)
                   @ (a :: k)
                   (ds1 :: t ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "index")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy) f a) ->
                 Lib.$fToJSONBlock7) -}
34b21fb304dad4a8e059054d5084d296
  $tc'Block :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11811071935054633841##
                   12348231764333764508##
                   Lib.$trModule
                   Lib.$tc'Block1) -}
afdf76fdecf8b28ca63a31a5e6a19552
  $tc'Block1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Block"#) -}
3940cc028f86df0a05729c81cdefdeee
  $tcBlock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4155397933891218626##
                   18088363585498803216##
                   Lib.$trModule
                   Lib.$tcBlock1) -}
f2b27390f0ed31bef52c452fe6811b5b
  $tcBlock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Block"#) -}
8a640b289472eea0927309d0d4d45a86
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
2019012722feb46f3bf3771692b74d66
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
238a646953dc5a60f9b3847b129328e2
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"#) -}
1fdbab55099b176cc6fab2f24fead7f2
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U><S,U><L,1*U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Types.Int)
                   (ww11 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww6) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww7 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww8 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Base.eqString ww3 ww9 of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww4 of wild6 { GHC.Types.I# x1 ->
                                     case ww10 of wild7 { GHC.Types.I# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x1 y1) of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Base.eqString ww5 ww11 } } } } } } } } }) -}
0baef2da1b8a71b4f3cada96a625866a
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Lib.Block -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
02edafa1054d52a7903f597efba11d2e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U><L,U>,
     Inline: [0] -}
9d39918ce5da39472a04d3383d9be8a3
  $w$ctoJSON ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 6,
     Strictness: <L,1*U(U)><L,1*U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Base.String) ->
                 case Lib.$w$dRecordToPairs1
                        @ GHC.Prim.Any
                        Lib.$fToJSONBlock_w2
                        ww
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P <GHC.Types.Int>_R <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "index")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R GHC.Types.Int>_R) <GHC.Prim.Any>_N))
                        (GHC.Generics.:*:
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "previousHash")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                           @ (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "timestamp")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                           @ GHC.Prim.Any
                           ww1
                             `cast`
                           (Trans
                                (Sym (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Base.String>_R <GHC.Prim.Any>_P))
                                (Sym (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "previousHash")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1
                                             GHC.Generics.R GHC.Base.String>_R) <GHC.Prim.Any>_N))
                           ww2
                             `cast`
                           (Trans
                                (Sym (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Int>_R <GHC.Prim.Any>_P))
                                (Sym (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "timestamp")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1
                                             GHC.Generics.R GHC.Types.Int>_R) <GHC.Prim.Any>_N)))
                        (case Lib.$w$dRecordToPairs
                                @ GHC.Prim.Any
                                Lib.$fToJSONBlock_w2
                                ww3
                                  `cast`
                                (Trans
                                     (Sym (GHC.Generics.N:K1[0]
                                               <GHC.Generics.R>_P
                                               <GHC.Base.String>_R
                                               <GHC.Prim.Any>_P))
                                     (Sym (GHC.Generics.N:M1[0]
                                               <GHC.Generics.S>_P
                                               <'GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "blockData")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy>_P
                                               <GHC.Generics.K1
                                                  GHC.Generics.R
                                                  GHC.Base.String>_R) <GHC.Prim.Any>_N))
                                (GHC.Generics.:*:
                                   @ (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "nonce")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                                   @ (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "blockHash")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                                   @ GHC.Prim.Any
                                   ww4
                                     `cast`
                                   (Trans
                                        (Sym (GHC.Generics.N:K1[0]
                                                  <GHC.Generics.R>_P
                                                  <GHC.Types.Int>_R
                                                  <GHC.Prim.Any>_P))
                                        (Sym (GHC.Generics.N:M1[0]
                                                  <GHC.Generics.S>_P
                                                  <'GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "nonce")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy>_P
                                                  <GHC.Generics.K1
                                                     GHC.Generics.R
                                                     GHC.Types.Int>_R) <GHC.Prim.Any>_N))
                                   ww5
                                     `cast`
                                   (Trans
                                        (Sym (GHC.Generics.N:K1[0]
                                                  <GHC.Generics.R>_P
                                                  <GHC.Base.String>_R
                                                  <GHC.Prim.Any>_P))
                                        (Sym (GHC.Generics.N:M1[0]
                                                  <GHC.Generics.S>_P
                                                  <'GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "blockHash")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy>_P
                                                  <GHC.Generics.K1
                                                     GHC.Generics.R
                                                     GHC.Base.String>_R) <GHC.Prim.Any>_N)))
                                (GHC.Types.[]
                                   @ Data.Aeson.Types.Internal.Pair) of ww6 { (#,#) ww7 ww8 ->
                         GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           ww7
                           ww8 }) of ww6 { (#,#) ww7 ww8 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.: @ Data.Aeson.Types.Internal.Pair ww7 ww8)
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt1 { DEFAULT ->
                 (# dt1 #) } }) -}
2732cf3e4c7f193ec46da015b212c8d9
  $w$dRecordToPairs ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "blockData")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Base.String)
         a1
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "nonce")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Types.Int))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "blockHash")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         a1
    -> [Data.Aeson.Types.Internal.Pair]
    -> (# Data.Aeson.Types.Internal.Pair,
          [Data.Aeson.Types.Internal.Pair] #)
  {- Arity: 4,
     Strictness: <L,U(C(U),A,A,A,A,A)><L,1*U><L,1*U(1*U(U),1*U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (ww :: GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "blockData")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String)
                            a1)
                   (ww1 :: (GHC.Generics.:*:)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "nonce")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Types.Int))
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "blockHash")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String))
                             a1)
                   (w1 :: [Data.Aeson.Types.Internal.Pair]) ->
                 (# (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                     case ds7 Lib.$fToJSONBlock4 of dt1 { DEFAULT ->
                     case GHC.Magic.runRW#
                            @ 'GHC.Types.PtrRepLifted
                            @ Data.Text.Internal.Text
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds13 { (#,#) ipv ipv1 ->
                             Data.Aeson.Types.ToJSON.$wouter4
                               ipv1
                               4#
                               dt1
                               0#
                               ipv }) of ds13 { (#,#) ipv ipv1 ->
                     ipv1 } } },
                     case GHC.Magic.runRW#
                            @ 'GHC.Types.PtrRepLifted
                            @ Data.Text.Internal.Text
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv ipv1 ->
                             Lib.$wouter1
                               ipv1
                               4#
                               ww
                                 `cast`
                               (Trans
                                    (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "blockData")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <a1>_N)
                                    (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a1>_P))
                               0#
                               ipv }) of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of dt1 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                     Data.Aeson.Types.Internal.String dt1 } }),
                    case ww1 of ww2 { GHC.Generics.:*: ww3 ww4 ->
                    GHC.Types.:
                      @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                      (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                       case ds7 Lib.$fToJSONBlock3 of dt1 { DEFAULT ->
                       case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds13 { (#,#) ipv ipv1 ->
                               Data.Aeson.Types.ToJSON.$wouter4
                                 ipv1
                                 4#
                                 dt1
                                 0#
                                 ipv }) of ds13 { (#,#) ipv ipv1 ->
                       ipv1 } } },
                       case ww3
                              `cast`
                            (Trans
                                 (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "nonce")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <a1>_N)
                                 (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P
                                      <GHC.Types.Int>_R
                                      <a1>_P)) of wild { GHC.Types.I# i ->
                       case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                       Data.Aeson.Types.Internal.Number
                         (Data.Scientific.Scientific dt 0#) } })
                      (GHC.Types.:
                         @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                         (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                          case ds7 Lib.$fToJSONBlock2 of dt1 { DEFAULT ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ Data.Text.Internal.Text
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds13 { (#,#) ipv ipv1 ->
                                  Data.Aeson.Types.ToJSON.$wouter4
                                    ipv1
                                    4#
                                    dt1
                                    0#
                                    ipv }) of ds13 { (#,#) ipv ipv1 ->
                          ipv1 } } },
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ Data.Text.Internal.Text
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds1 { (#,#) ipv ipv1 ->
                                  Lib.$wouter
                                    ipv1
                                    4#
                                    ww4
                                      `cast`
                                    (Trans
                                         (GHC.Generics.N:M1[0]
                                              <GHC.Generics.S>_P
                                              <'GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "blockHash")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy>_P
                                              <GHC.Generics.K1
                                                 GHC.Generics.R GHC.Base.String>_R <a1>_N)
                                         (GHC.Generics.N:K1[0]
                                              <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a1>_P))
                                    0#
                                    ipv }) of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of dt1 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                          Data.Aeson.Types.Internal.String dt1 } })
                         w1) } #)) -}
63b4171b746f83802125ebab5540699f
  $w$dRecordToPairs1 ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "index")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Int)
         a1
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "previousHash")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Base.String))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "timestamp")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Types.Int))
         a1
    -> [Data.Aeson.Types.Internal.Pair]
    -> (# Data.Aeson.Types.Internal.Pair,
          [Data.Aeson.Types.Internal.Pair] #)
  {- Arity: 4,
     Strictness: <L,U(C(U),A,A,A,A,A)><L,1*U(U)><L,1*U(1*U,1*U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (ww :: GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "index")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Types.Int)
                            a1)
                   (ww1 :: (GHC.Generics.:*:)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "previousHash")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Base.String))
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "timestamp")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.Rec0 GHC.Types.Int))
                             a1)
                   (w1 :: [Data.Aeson.Types.Internal.Pair]) ->
                 (# (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                     case ds7 Lib.$fToJSONBlock7 of dt1 { DEFAULT ->
                     case GHC.Magic.runRW#
                            @ 'GHC.Types.PtrRepLifted
                            @ Data.Text.Internal.Text
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds13 { (#,#) ipv ipv1 ->
                             Data.Aeson.Types.ToJSON.$wouter4
                               ipv1
                               4#
                               dt1
                               0#
                               ipv }) of ds13 { (#,#) ipv ipv1 ->
                     ipv1 } } },
                     case ww
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "index")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy>_P
                                    <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <a1>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Types.Int>_R
                                    <a1>_P)) of wild { GHC.Types.I# i ->
                     case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                     Data.Aeson.Types.Internal.Number
                       (Data.Scientific.Scientific dt 0#) } }),
                    case ww1 of ww2 { GHC.Generics.:*: ww3 ww4 ->
                    GHC.Types.:
                      @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                      (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                       case ds7 Lib.$fToJSONBlock6 of dt1 { DEFAULT ->
                       case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds13 { (#,#) ipv ipv1 ->
                               Data.Aeson.Types.ToJSON.$wouter4
                                 ipv1
                                 4#
                                 dt1
                                 0#
                                 ipv }) of ds13 { (#,#) ipv ipv1 ->
                       ipv1 } } },
                       case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      10#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               Lib.$wouter2
                                 ipv1
                                 4#
                                 ww3
                                   `cast`
                                 (Trans
                                      (GHC.Generics.N:M1[0]
                                           <GHC.Generics.S>_P
                                           <'GHC.Generics.MetaSel
                                              ('GHC.Base.Just "previousHash")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy>_P
                                           <GHC.Generics.K1
                                              GHC.Generics.R GHC.Base.String>_R <a1>_N)
                                      (GHC.Generics.N:K1[0]
                                           <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a1>_P))
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt1 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Data.Aeson.Types.Internal.String dt1 } })
                      (GHC.Types.:
                         @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                         (case w of wild { Data.Aeson.Types.Internal.Options ds7 ds8 ds9 ds10 ds11 ds12 ->
                          case ds7 Lib.$fToJSONBlock5 of dt1 { DEFAULT ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ Data.Text.Internal.Text
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newByteArray#
                                         @ GHC.Prim.RealWorld
                                         10#
                                         s1 of ds13 { (#,#) ipv ipv1 ->
                                  Data.Aeson.Types.ToJSON.$wouter4
                                    ipv1
                                    4#
                                    dt1
                                    0#
                                    ipv }) of ds13 { (#,#) ipv ipv1 ->
                          ipv1 } } },
                          case ww4
                                 `cast`
                               (Trans
                                    (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "timestamp")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <a1>_N)
                                    (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P
                                         <GHC.Types.Int>_R
                                         <a1>_P)) of wild { GHC.Types.I# i ->
                          case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                          Data.Aeson.Types.Internal.Number
                            (Data.Scientific.Scientific dt 0#) } })
                         w1) } #)) -}
9ab0be0638c77fdd7c687537151ddd29
  $wcalculateBlockHash ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U><L,1*U(U)><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int) ->
                 case Lib.calculateBlockHash2
                        (case ww of ww5 { GHC.Types.I# ww6 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww6
                                (GHC.Types.[] @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char ww8 ww9)
                           (GHC.Base.++
                              @ GHC.Types.Char
                              ww1
                              (case ww2 of ww10 { GHC.Types.I# ww11 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww11
                                      (GHC.Types.[] @ GHC.Types.Char) of ww12 { (#,#) ww13 ww14 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww13 ww14)
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    ww3
                                    (case ww4 of ww15 { GHC.Types.I# ww16 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww16
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww17 { (#,#) ww18 ww19 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       ww18
                                       ww19 } })) } })) } }) of ww5 { Data.ByteString.Internal.PS ww6 ww7 ww8 ww9 ->
                 case ww9 of wild {
                   DEFAULT -> Lib.calculateBlockHash1
                   32#
                   -> Crypto.Hash.Types.$fShowDigest_$cshow
                        @ Crypto.Hash.SHA256.SHA256
                        (Data.ByteArray.Methods.copyAndFreeze
                           @ Data.ByteString.Internal.ByteString
                           @ (Basement.UArray.Base.UArray GHC.Word.Word8)
                           @ GHC.Prim.Any
                           Data.ByteArray.Types.$fByteArrayAccessByteString
                           Crypto.Hash.$s$fByteArrayUArray
                           (Data.ByteString.Internal.PS ww6 ww7 ww8 32#)
                           Data.ByteArray.Methods.convert1
                             `cast`
                           (<GHC.Ptr.Ptr GHC.Prim.Any>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                          `cast`
                        (Sym (Crypto.Hash.Types.N:Digest[0]
                                  <Crypto.Hash.SHA256.SHA256>_P)) } }) -}
d2b7a1e335ec162351afa226cdec41e6
  $wfindNonce ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
  {- Arity: 5, Strictness: <L,U(U)><L,U><L,U(U)><L,U><L,U>,
     Inline: [0] -}
47e7096c2a6a32441962f9ead73d2539
  $wisValidNewBlock ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 8,
     Strictness: <S,U><L,1*U><S,U><L,U><L,1*U(U)><L,1*U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# (GHC.Prim.+# ww 1#) ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString
                                  ww7
                                  (Lib.$wcalculateBlockHash
                                     (GHC.Types.I# ww2)
                                     ww3
                                     ww4
                                     ww5
                                     ww6) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Lib.satisfiesPow ww7 } } }) -}
6e4eaf68304b806949e910dfa15a4098
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
505413af651f32b0590d0f1aededb4e1
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
4fe420ca8d8fa73d3e52f60438af0fe4
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
0baef2da1b8a71b4f3cada96a625866a
  data Block
    = Block {index :: GHC.Types.Int,
             previousHash :: GHC.Base.String,
             timestamp :: GHC.Types.Int,
             blockData :: GHC.Base.String,
             nonce :: GHC.Types.Int,
             blockHash :: GHC.Base.String}
0baef2da1b8a71b4f3cada96a625866a
  axiom Rep_Block::
      GHC.Generics.Rep Lib.Block
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Block"
               "Lib"
               "312Coin-0.1.0.0-91BkfT1fW8m3z2HndxAtPA"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Block" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "index")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 GHC.Types.Int)
                 GHC.Generics.:*: (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "previousHash")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 GHC.Base.String)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "timestamp")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Int)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "blockData")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "nonce")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Int)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "blockHash")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Base.String)))))
59599dec725c7fef5311f88cf084daff
  blockData :: Lib.Block -> GHC.Base.String
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
2df4c53b5789faeaaeb7b538f787103b
  blockHash :: Lib.Block -> GHC.Base.String
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
943890c9215e3c15ccf86dd54557287e
  calculateBlockHash :: Lib.Block -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U,1*U(U),1*U,1*U(U),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Block) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Lib.$wcalculateBlockHash ww1 ww2 ww3 ww4 ww5 }) -}
784c7a9845730b052dd5aa553f4d5b9f
  calculateBlockHash1 :: GHC.Base.String
  {- Strictness: x -}
75c1a7ad9f7d1fbb55a65fd84c569405
  calculateBlockHash2 ::
    GHC.Base.String -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 Data.ByteArray.Methods.copyAndFreeze
                   @ (Crypto.Hash.Types.Digest Crypto.Hash.SHA256.SHA256)
                   @ Data.ByteString.Internal.ByteString
                   @ GHC.Prim.Any
                   (Crypto.Hash.Types.$fByteArrayAccessDigest
                      @ Crypto.Hash.SHA256.SHA256)
                   Data.ByteArray.Types.$fByteArrayByteString
                   (Crypto.Hash.hash
                      @ Data.ByteString.Internal.ByteString
                      @ Crypto.Hash.SHA256.SHA256
                      Data.ByteArray.Types.$fByteArrayAccessByteString
                      Crypto.Hash.SHA256.$fHashAlgorithmSHA256
                      (Data.ByteString.Internal.packChars x))
                   Data.ByteArray.Methods.convert1
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Prim.Any>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))) -}
b248a6797dc6708c221059f7f210786b
  difficultyTarget :: GHC.Integer.Type.Integer
  {- Unfolding: (1766847064778384329583297500742918515827483896875618958121606201292619775) -}
e82e981fc905ea85830c7e316f96e9d7
  epoch :: GHC.Types.IO GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.epoch1 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
28f66ec2ec2223936cd8a065085baf54
  epoch1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Data.Time.Clock.CTimeval.getCTimeval1
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.Real.$w$s$c/
                           (Data.Time.Clock.POSIX.getCurrentTime2 ipv1)
                             `cast`
                           (Trans
                                (Data.Time.Clock.UTC.N:NominalDiffTime[0])
                                (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                           GHC.Real.$fEnumRatio1
                           Data.Fixed.$fHasResolutionE5
                           GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                    GHC.Real.$w$s$cround
                      @ GHC.Types.Int
                      GHC.Real.$fIntegralInt
                      ww7
                      ww8 } #) }) -}
1de8d152b8b4db5149edb8f4f0906682
  findNonce :: Lib.Block -> GHC.Types.Int
  {- Arity: 1, Strictness: <S(LLLLSL),U(U(U),U,U(U),U,U(U),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Block) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 case Lib.$wfindNonce ww1 ww2 ww3 ww4 ww8 of ww9 { DEFAULT ->
                 GHC.Types.I# ww9 } } }) -}
610d6dda351bd25d577519b6b1666539
  hashString :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case Lib.calculateBlockHash2
                        x of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 case ww4 of wild {
                   DEFAULT -> Lib.calculateBlockHash1
                   32#
                   -> Crypto.Hash.Types.$fShowDigest_$cshow
                        @ Crypto.Hash.SHA256.SHA256
                        (Data.ByteArray.Methods.copyAndFreeze
                           @ Data.ByteString.Internal.ByteString
                           @ (Basement.UArray.Base.UArray GHC.Word.Word8)
                           @ GHC.Prim.Any
                           Data.ByteArray.Types.$fByteArrayAccessByteString
                           Crypto.Hash.$s$fByteArrayUArray
                           (Data.ByteString.Internal.PS ww1 ww2 ww3 32#)
                           Data.ByteArray.Methods.convert1
                             `cast`
                           (<GHC.Ptr.Ptr GHC.Prim.Any>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                          `cast`
                        (Sym (Crypto.Hash.Types.N:Digest[0]
                                  <Crypto.Hash.SHA256.SHA256>_P)) } }) -}
982c14a8f6d15c86941d37221615400e
  index :: Lib.Block -> GHC.Types.Int
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
c5061015826cdc3ffc6319eb60daeb08
  initialBlock :: Lib.Block
  {- Strictness: m,
     Unfolding: (Lib.Block
                   Lib.initialBlock5
                   Lib.initialBlock4
                   Lib.initialBlock5
                   Lib.initialBlock3
                   Lib.initialBlock2
                   Lib.initialBlock1) -}
6108d5342dcd6c8eb7a1f27605558163
  initialBlock1 :: GHC.Base.String
  {- Unfolding: (Lib.$wcalculateBlockHash
                   Lib.initialBlock5
                   Lib.initialBlock4
                   Lib.initialBlock5
                   Lib.initialBlock3
                   Lib.initialBlock2) -}
2b40bd53bd89008f3200dd0806587330
  initialBlock2 :: GHC.Types.Int
  {- Unfolding: (case Lib.$wfindNonce
                        Lib.initialBlock5
                        Lib.initialBlock4
                        Lib.initialBlock5
                        Lib.initialBlock3
                        0# of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
703c2267b3b935c3b3fee0457061b5a4
  initialBlock3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "initial data"#) -}
9c3b0d65002a92c00e54a5fdbbd3bc0f
  initialBlock4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "0"#) -}
0db248f0edaac0148c15c965755877ab
  initialBlock5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e4b34e8aaa38089e72cfb3bf33fb41bb
  isValidChain :: [Lib.Block] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (chain :: [Lib.Block]) ->
                 case chain of wild {
                   [] -> GHC.Types.True
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case x of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                           case ww1 of ww7 { GHC.Types.I# ww8 ->
                           Lib.$w$c==
                             ww8
                             ww2
                             ww3
                             ww4
                             ww5
                             ww6
                             0#
                             Lib.initialBlock4
                             Lib.initialBlock5
                             Lib.initialBlock3
                             Lib.initialBlock2
                             Lib.initialBlock1 } }
                        : ipv ipv1
                        -> case x of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                           case ww1 of ww7 { GHC.Types.I# ww8 ->
                           case ww8 of wild2 {
                             DEFAULT -> GHC.Types.False
                             0#
                             -> case GHC.Base.eqString ww2 Lib.initialBlock4 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww3 of wild4 { GHC.Types.I# x1 ->
                                     case x1 of wild5 {
                                       DEFAULT -> GHC.Types.False
                                       0#
                                       -> case GHC.Base.eqString ww4 Lib.initialBlock3 of wild6 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww5 of wild7 { GHC.Types.I# x2 ->
                                               case Lib.initialBlock2 of wild8 { GHC.Types.I# y ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==# x2 y) of wild9 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case GHC.Base.eqString
                                                           ww6
                                                           Lib.initialBlock1 of wild10 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> (Lib.isValidChain_go wild wild1)
                                                           `cast`
                                                         (Data.Monoid.N:All[0]) } } } } } } } } } } } } }) -}
0df583a7cfda196f00eac5878e97a94a
  isValidChain_go :: [Lib.Block] -> [Lib.Block] -> Data.Monoid.All
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
395a2f90c1defb8f0e3aa62d92930a20
  isValidNewBlock :: Lib.Block -> Lib.Block -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S)LLLLL),1*U(1*U(U),A,A,A,A,1*U)><S(S(S)LLLLL),1*U(U(U),U,1*U(U),1*U,1*U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Block) (w1 :: Lib.Block) ->
                 case w of ww { Lib.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { GHC.Types.I# ww8 ->
                 case w1 of ww9 { Lib.Block ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww10 of ww16 { GHC.Types.I# ww17 ->
                 Lib.$wisValidNewBlock
                   ww8
                   ww6
                   ww17
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15 } } } }) -}
4edf28591a37504131f410f420133ab6
  mineBlockFrom ::
    Control.Monad.IO.Class.MonadIO m =>
    Lib.Block -> GHC.Base.String -> m Lib.Block
  {- Arity: 3,
     Strictness: <S(SL),U(1*U,1*C1(U))><L,U(1*U(U),A,A,A,A,1*U)><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (eta :: Lib.Block)
                   (eta1 :: GHC.Base.String) ->
                 let {
                   lvl38 :: GHC.Types.Int
                   = case eta of wild { Lib.Block ds ds1 ds2 ds3 ds4 ds5 ->
                     case ds of wild1 { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.+# x 1#) } }
                 } in
                 let {
                   lvl39 :: GHC.Base.String
                   = case eta of wild { Lib.Block ds ds1 ds2 ds3 ds4 ds5 -> ds5 }
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ GHC.Types.Int
                   @ Lib.Block
                   (Control.Monad.IO.Class.liftIO
                      @ m
                      $dMonadIO
                      @ GHC.Types.Int
                      Lib.epoch1 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)))
                   (\ (time :: GHC.Types.Int) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Lib.Block
                      (let {
                         ds :: GHC.Types.Int
                         = case Lib.$wfindNonce lvl38 lvl39 time eta1 0# of ww { DEFAULT ->
                           GHC.Types.I# ww }
                       } in
                       Lib.Block
                         lvl38
                         lvl39
                         time
                         eta1
                         ds
                         (Lib.$wcalculateBlockHash lvl38 lvl39 time eta1 ds)))) -}
9a17a6afe3d28a5e09d8752cf9f57f5b
  nonce :: Lib.Block -> GHC.Types.Int
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
58d12f47d64bd30735709380cb74c522
  previousHash :: Lib.Block -> GHC.Base.String
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
b3d0b0ba121dac88b69bf3191eb70673
  satisfiesPow :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (bHash :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Lib.satisfiesPow2
                           (GHC.CString.unpackAppendCString# "0x"# bHash)) of wild {
                   [] -> Lib.satisfiesPow1 bHash
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case GHC.Integer.Type.ltInteger#
                                  x
                                  Lib.difficultyTarget of wild2 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 }
                        : ipv ipv1 -> Lib.satisfiesPow1 bHash } }) -}
3fb4037951290be8bf2116cc36b913bc
  satisfiesPow1 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>x -}
904d8b12550929dbae6739d125e5da2b
  satisfiesPow2 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
dd4bb2c04f125dac59ae07b6bc08b7de
  setBlockHash :: Lib.Block -> Lib.Block
  {- Arity: 1, Strictness: <S,1*U(U(U),U,U(U),U,U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (block :: Lib.Block) ->
                 case block of wild { Lib.Block ds ds1 ds2 ds3 ds4 ds5 ->
                 Lib.Block ds ds1 ds2 ds3 ds4 (Lib.calculateBlockHash wild) }) -}
53d25d0025ad3f2e4479721ee60dbebd
  setNonceAndHash :: Lib.Block -> Lib.Block
  {- Arity: 1, Strictness: <S,1*U(U(U),U,U(U),U,U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (block :: Lib.Block) ->
                 case block of wild { Lib.Block ds ds1 ds2 ds3 ds4 ds5 ->
                 let {
                   ds6 :: GHC.Types.Int = Lib.findNonce wild
                 } in
                 Lib.Block
                   ds
                   ds1
                   ds2
                   ds3
                   ds6
                   (Lib.calculateBlockHash (Lib.Block ds ds1 ds2 ds3 ds6 ds5)) }) -}
fa766312ad5f218728a9d67cb2d22534
  sha256 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Crypto.Hash.Types.Digest Crypto.Hash.SHA256.SHA256)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 case Lib.calculateBlockHash2
                        x of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Crypto.Hash.$w$cdigestFromByteString6 ww1 ww2 ww3 ww4 }) -}
d0d4963a9919f41c144e36774f435d74
  timestamp :: Lib.Block -> GHC.Types.Int
  RecSel Left Lib.Block
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Block) ->
                 case ds of wild { Lib.Block ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
instance GHC.Classes.Eq [Lib.Block] = Lib.$fEqBlock
instance Data.Aeson.Types.FromJSON.FromJSON [Lib.Block]
  = Lib.$fFromJSONBlock
instance GHC.Generics.Generic [Lib.Block] = Lib.$fGenericBlock
instance GHC.Read.Read [Lib.Block] = Lib.$fReadBlock
instance GHC.Show.Show [Lib.Block] = Lib.$fShowBlock
instance Data.Aeson.Types.ToJSON.ToJSON [Lib.Block]
  = Lib.$fToJSONBlock
family instance GHC.Generics.Rep [Lib.Block] = Lib.Rep_Block
"SPEC/Lib $fFromJSON[] @ Char" [ALWAYS] forall ($dFromJSON :: Data.Aeson.Types.FromJSON.FromJSON
                                                                GHC.Types.Char)
  Data.Aeson.Types.FromJSON.$fFromJSON[] @ GHC.Types.Char $dFromJSON
  = Lib.$s$fFromJSON[]
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "blockData") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                        ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                        ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                        ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                         "blockData"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "blockData")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel8
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "blockHash") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                        ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                        ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                        ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                         "blockHash"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "blockHash")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "index") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                    ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                    ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                    ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                     "index"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "index")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel20
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "nonce") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                    ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                    ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                    ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                     "nonce"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "nonce")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel4
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "previousHash") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                           ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                           ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                           ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                            "previousHash"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "previousHash")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel16
"SPEC/Lib $fSelectorMetaMetaSel @ ('Just
                                    "timestamp") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                        ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                        ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                        ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                         "timestamp"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "timestamp")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     $dSingI
                                     $dSingI1
                                     $dSingI2
                                     $dSingI3
  = Lib.$s$fSelectorMetaMetaSel12
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "blockData") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                            ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                            ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                            ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                             "blockData"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "blockData")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName2
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "blockHash") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                            ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                            ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                            ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                             "blockHash"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "blockHash")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "index") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                        ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                        ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                        ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                         "index"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "index")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName5
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "nonce") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                        ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                        ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                        ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                         "nonce"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "nonce")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName1
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "previousHash") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                               ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                               ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                               ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                                                "previousHash"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "previousHash")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName4
"SPEC/Lib $fSelectorMetaMetaSel_$cselName @ ('Just
                                              "timestamp") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [ALWAYS] forall ($dSingI3 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                            ($dSingI2 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                            ($dSingI1 :: GHC.Generics.SingI
                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                            ($dSingI :: GHC.Generics.SingI
                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                             "timestamp"))
  GHC.Generics.$fSelectorMetaMetaSel_$cselName @ ('GHC.Base.Just
                                                    "timestamp")
                                               @ 'GHC.Generics.NoSourceUnpackedness
                                               @ 'GHC.Generics.NoSourceStrictness
                                               @ 'GHC.Generics.DecidedLazy
                                               $dSingI
                                               $dSingI1
                                               $dSingI2
                                               $dSingI3
  = Lib.$s$fSelectorMetaMetaSel_$s$fSelectorMetaMetaSel_$cselName3
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

