
==================== FINAL INTERFACE ====================
2017-11-27 20:22:20.296323 UTC

interface 312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW:Server [family instance module] 8002
  interface hash: cfb780f1fce10d4b071c58a84de0fce7
  ABI hash: 2c7eaedb8ce3d40bbaabd3dd7fa66c85
  export-list hash: d5a648370faf7eeeda7017da2a59bcf5
  orphan hash: e6ac57eebfd2ae21ceca807dea4f90ac
  flag hash: 92a87f93a214d458259573a2c61da388
  sig of: Nothing
  used TH splices: False
  where
exports:
  Server.addDebug
  Server.app
  Server.getBlockChain
  Server.runServer
  Server.ApiAction
  Server.BlockChainState{Server.BlockChainState blockChainState}
  Server.MySession{Server.EmptySession}
module dependencies: Lib
package dependencies: Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn
                      Spock-core-0.12.0.0@Spock-core-0.12.0.0-4M4NSRiG2taFbUY5ijcMbA
                      aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      appar-0.1.4@appar-0.1.4-DGWHHt2WRn9FI49prcwO9
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      attoparsec-iso8601-1.0.0.0@attoparsec-iso8601-1.0.0.0-CiauZZhskHA6jYy7CqE2mZ
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-prelude-1.2.0.1@base-prelude-1.2.0.1-HJh3WMXaeu8jTCoycvBYB
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-LxClHUTiKUUAxWtvJ5Oeoy
                      byteable-0.1.1@byteable-0.1.1-2lU1pexQSLj1KbNO17UifQ
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      containers-0.5.7.1@containers-0.5.7.1
                      cookie-0.4.3@cookie-0.4.3-LVlxdgOdUJj73o1VFenWKF
                      cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp
                      cryptonite-0.23@cryptonite-0.23-B2QruyompNMGbr9rx9h1sv
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      focus-0.1.5.2@focus-0.1.5.2-KPQd4iNr1PgFoR0eUkxMA2
                      foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hslogger-1.2.10@hslogger-1.2.10-Li6ZV5C1ftGLPA71zPNMlf
                      http-api-data-0.3.7.1@http-api-data-0.3.7.1-AT41KDpP9ayH63FPNXWrvF
                      http-date-0.0.6.1@http-date-0.0.6.1-AkYFHBFn90lGSerD29arC9
                      http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY
                      http2-1.6.3@http2-1.6.3-5WuWRsIVuKR43Sq9Cs2O4Z
                      hvect-0.4.0.0@hvect-0.4.0.0-Bz3s0s4mhGy1edxe23N084
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      iproute-1.7.1@iproute-1.7.1-EJjAtfniBUorobFQnk7lR
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      list-t-1.0.0.1@list-t-1.0.0.1-5hQv0wfkuYf598er1kAI66
                      memory-0.14.8@memory-0.14.8-5gChKptja3L48mJBRibgYj
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      psqueues-0.2.4.0@psqueues-0.2.4.0-CvAhEbuBRGQCwl61vq8zYS
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      reroute-0.4.1.0@reroute-0.4.1.0-g9fEpLl8V32jaJQsmyiVF
                      resource-pool-0.2.3.2@resource-pool-0.2.3.2-GmoeVeJ8L5Y51jMJ5dPk3U
                      resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      simple-sendfile-0.2.25@simple-sendfile-0.2.25-4uYtK5a0djFILo2ePfLs47
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      stm-containers-0.2.16@stm-containers-0.2.16-7scSjzno57XDUi9xZJ6RMC
                      streaming-commons-0.1.17@streaming-commons-0.1.17-6xuIA5RXrs65yyeq3HWIWP
                      stringsearch-0.3.6.6@stringsearch-0.3.6.6-2soGORichTR6reHVhDqKip
                      superbuffer-0.3.1.1@superbuffer-0.3.1.1-Jbkeagf95PfGo0zRwZ3mqB
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vault-0.3.0.7@vault-0.3.0.7-FSJCPczyPWW8DwvwP76qt4
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      wai-3.2.1.1@wai-3.2.1.1-GYhAFGd1F2uKjCUZVPyC2C
                      wai-extra-3.0.20.0@wai-extra-3.0.20.0-CbEnkp3sjwfBRcLAwtS1d
                      warp-3.2.13@warp-3.2.13-FhWulh599WH9bUCGJnpWGc
                      word8-0.1.3@word8-0.1.3-9o1uWQQ6KysJq8GGsVHHit
orphans: Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Internal.Monad
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         stm-containers-0.2.16@stm-containers-0.2.16-7scSjzno57XDUi9xZJ6RMC:STMContainers.Map
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: 312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW:Lib
                         Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Internal.Monad
                         Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Internal.SessionVault
                         Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Internal.Types
                         Spock-core-0.12.0.0@Spock-core-0.12.0.0-4M4NSRiG2taFbUY5ijcMbA:Web.Spock.Internal.Wire
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.BoxedArray
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Monad
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.MutableBuilder
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Nat
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.NonEmpty
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Numerical.Subtractive
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ASCII7
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF16
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF32
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.AsciiString
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.OffsetSize
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UTF8.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Bitmap
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Chunked.Unboxed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Buildable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Element
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Keyed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Mutable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Tuple
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         iproute-1.7.1@iproute-1.7.1-EJjAtfniBUorobFQnk7lR:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-EJjAtfniBUorobFQnk7lR:Data.IP.Range
                         list-t-1.0.0.1@list-t-1.0.0.1-5hQv0wfkuYf598er1kAI66:ListT
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi:Control.Monad.Trans.Resource.Internal
                         stm-containers-0.2.16@stm-containers-0.2.16-7scSjzno57XDUi9xZJ6RMC:STMContainers.Map
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  Lib 8d47b7d3bcc435fd2ec5075bb7f769a4
  exports: 275dce19aa439e522e19acad8b6a6eee
  Block 14468dcfc2e886c5f372cb4b650f3fbc
  Block 1cf0f64a60de86e0e6c47dc1761da7a0
  initialBlock 47f2463bf6d40e9ebde21effb8c387c7
import  -/  Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock b645b9129155ecc1350f1e1c22188158
import  -/  Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Config 0358826ed784dbfe5b1bafd5eb66c035
import  -/  Spock-0.12.0.0@Spock-0.12.0.0-DoeIEjqt9tNI9prv9Tysmn:Web.Spock.Internal.Types 8e225c927ac08e9fa79fafd28cf2b4f0
import  -/  Spock-core-0.12.0.0@Spock-core-0.12.0.0-4M4NSRiG2taFbUY5ijcMbA:Web.Spock.Core 2887e1a3656ee2ed4b85de422f6e6c63
import  -/  Spock-core-0.12.0.0@Spock-core-0.12.0.0-4M4NSRiG2taFbUY5ijcMbA:Web.Spock.Internal.CoreAction 19e258b8331393355f574bc8dd0bad30
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj:Control.Concurrent.Async ea0392541014747b7209d5d4a7804b6a
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hslogger-1.2.10@hslogger-1.2.10-Li6ZV5C1ftGLPA71zPNMlf:System.Log.Logger 6707e3b5e5a7f0e9078d17200983dc9a
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Trans d69bc2e104a90fb918d853b240f7af2e
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
0f3ebde8782c4140b671d3c7a78c4b84
  $fGenericBlockChainState ::
    GHC.Generics.Generic Server.BlockChainState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Server.BlockChainState
                  Server.$fGenericBlockChainState_$cfrom
                  Server.$fGenericBlockChainState_$cto -}
0f3ebde8782c4140b671d3c7a78c4b84
  $fGenericBlockChainState1 ::
    Server.BlockChainState
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "BlockChainState" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "blockChainState")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R (GHC.IORef.IORef [Lib.Block])))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Server.BlockChainState) ->
                 case x1 of wild { Server.BlockChainState g1 ->
                 g1
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P <GHC.IORef.IORef [Lib.Block]>_R <x>_P))
                      (Trans
                           (Sym (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "blockChainState")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1
                                        GHC.Generics.R (GHC.IORef.IORef [Lib.Block])>_R))
                           (Sym (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "BlockChainState" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "blockChainState")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (GHC.IORef.IORef [Lib.Block]))>_R)) <x>_N)) }) -}
0f3ebde8782c4140b671d3c7a78c4b84
  $fGenericBlockChainState_$cfrom ::
    Server.BlockChainState -> GHC.Generics.Rep Server.BlockChainState x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (0, True, True)
                Server.$fGenericBlockChainState1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Server.BlockChainState>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "BlockChainState"
                                       "Server"
                                       "312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "BlockChainState" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "blockChainState")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.IORef.IORef [Lib.Block])))>_R))
                          (Sub (Sym (Server.Rep_BlockChainState[0]))) <x>_N) -}
0f3ebde8782c4140b671d3c7a78c4b84
  $fGenericBlockChainState_$cto ::
    GHC.Generics.Rep Server.BlockChainState x -> Server.BlockChainState
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (ds :: GHC.Generics.Rep Server.BlockChainState x) ->
                 Server.BlockChainState
                   ds
                     `cast`
                   (Trans
                        (Trans
                             (Sub (Server.Rep_BlockChainState[0]))
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <GHC.Generics.D>_P
                                       <'GHC.Generics.MetaData
                                          "BlockChainState"
                                          "Server"
                                          "312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW"
                                          'GHC.Types.False>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "BlockChainState"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.True)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "blockChainState")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R (GHC.IORef.IORef [Lib.Block])))>_R)
                                  (Trans
                                       (GHC.Generics.N:M1[0]
                                            <GHC.Generics.C>_P
                                            <'GHC.Generics.MetaCons
                                               "BlockChainState"
                                               'GHC.Generics.PrefixI
                                               'GHC.Types.True>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "blockChainState")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R (GHC.IORef.IORef [Lib.Block]))>_R)
                                       (GHC.Generics.N:M1[0]
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               ('GHC.Base.Just "blockChainState")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               (GHC.IORef.IORef [Lib.Block])>_R))) <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.IORef.IORef [Lib.Block]>_R <x>_P))) -}
ef561d81198f5cc96a5a07752cc6e80b
  $s$fMonadIOActionCtxT2 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Server.$s$fMonadIOActionCtxT_$s$fMonadIOResourceT -}
6e23babe8aac038560ed89bfd340584a
  $s$fMonadIOActionCtxT_$s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                  Web.Spock.Internal.Monad.$fHasSpockt_$s$fMonadIOResourceT_$cp1MonadIO
                  Server.$s$fMonadIOActionCtxT_$s$fMonadIOResourceT_$cliftIO -}
fe41bded1a5054716d0bde0cd10fa413
  $s$fMonadIOActionCtxT_$s$fMonadIOResourceT_$cliftIO ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: GHC.Types.IO a) ->
                 let {
                   eta1 :: GHC.Types.IO a = GHC.Base.id @ (GHC.Types.IO a) eta
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <GHC.Types.IO>_R <a>_N))) -}
85249bd96d8a4032074c514a0fad2ea1
  $s$fMonadIOActionCtxT_$s$fMonadIOWebStateT ::
    Control.Monad.IO.Class.MonadIO
      (Web.Spock.Internal.Types.WebStateT
         conn
         sess
         st
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ conn @ sess @ st.
                  @ (Web.Spock.Internal.Types.WebStateT
                       conn
                       sess
                       st
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  (Server.$s$fMonadIOActionCtxT_$s$fMonadIOWebStateT_$cp1MonadIO
                     @ conn
                     @ sess
                     @ st)
                  (Web.Spock.Internal.Types.$fMonadIOWebStateT_$cliftIO
                     @ conn
                     @ sess
                     @ st
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Server.$s$fMonadIOActionCtxT2) -}
c55f277b03bd91b2da3474ca7becc478
  $s$fMonadIOActionCtxT_$s$fMonadIOWebStateT_$cp1MonadIO ::
    GHC.Base.Monad
      (Web.Spock.Internal.Types.WebStateT
         conn
         sess
         st
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Web.Spock.Internal.Monad.$fHasSpockt_$s$fMonadWebStateT -}
401b5758bffddf6d1a8099af8b307e03
  $tc'BlockChainState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12084410033442053460##
                   17552849152984140681##
                   Server.$trModule
                   Server.$tc'BlockChainState1) -}
308167bea19ca085e5e5e3fc42b82083
  $tc'BlockChainState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BlockChainState"#) -}
10bf46630e4cb06b95097d675ddf7e5b
  $tc'EmptySession :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3572438023675139216##
                   17958640765953458474##
                   Server.$trModule
                   Server.$tc'EmptySession1) -}
d384e39fc2b9c17c6e72bca222af3997
  $tc'EmptySession1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptySession"#) -}
3abfd9256e44e14c5bff4a27a4abfb01
  $tcBlockChainState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10428732514235896195##
                   6013370826562396136##
                   Server.$trModule
                   Server.$tcBlockChainState1) -}
fc1c7b47b7690768672b2092cb608d21
  $tcBlockChainState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BlockChainState"#) -}
64d16762e290441806beb7898ce7d600
  $tcMySession :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12402992586496826874##
                   7358088296995497959##
                   Server.$trModule
                   Server.$tcMySession1) -}
49e222762a7811324796c947cb7b4f3a
  $tcMySession1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MySession"#) -}
8ff07777bb894af13a2acdc3918db15f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Server.$trModule2
                   Server.$trModule1) -}
c403e3ccc706d9b273be80b60e9dc931
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Server"#) -}
e7568e856c0a6a2c98c4e799b2f8ebdb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW"#) -}
3946fea49637a3fc5248c3c29f319357
  type ApiAction a = Web.Spock.Internal.Types.SpockAction () () () a
0f3ebde8782c4140b671d3c7a78c4b84
  data BlockChainState
    = BlockChainState {blockChainState :: GHC.IORef.IORef [Lib.Block]}
369287603ee0cee2d6284b29f4a71e59
  data MySession = EmptySession
0f3ebde8782c4140b671d3c7a78c4b84
  axiom Rep_BlockChainState::
      GHC.Generics.Rep Server.BlockChainState
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "BlockChainState"
               "Server"
               "312Coin-0.1.0.0-3NylGJnbwqAAplgCLpSCLW"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "BlockChainState" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "blockChainState")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 (GHC.IORef.IORef [Lib.Block]))))
e2775e66dc2cc5f696632c5749e9fca9
  addDebug ::
    Control.Monad.IO.Class.MonadIO m => GHC.Base.String -> m ()
  {- Arity: 2, Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (str :: GHC.Base.String) ->
                 Control.Monad.IO.Class.liftIO
                   @ m
                   $dMonadIO
                   @ ()
                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case System.Log.Logger.alertM4
                           Server.addDebug2
                           s1 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of ww { System.Log.Logger.Logger ww1 ww2 ww3 ->
                    System.Log.Logger.$wlogL
                      ww1
                      ww2
                      ww3
                      System.Log.DEBUG
                      (GHC.Show.$fShow[]_$s$cshow1 str)
                      ipv } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
1bfc18c0f122587d0dd97c545775f18b
  addDebug2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "312Coin"#) -}
a33656445f5d9c94e07bdf9fe7bfe9db
  app ::
    Web.Spock.SpockM () Server.MySession Server.BlockChainState ()
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Server.app1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                               <Web.Routing.SafeRouting.PathInternal '[]>_R
                               <[Network.Wai.Application -> Network.Wai.Application]>_N
                               <Web.Routing.Router.RegistryState
                                  (Web.Spock.Internal.Wire.ActionCtxT
                                     ()
                                     (Web.Spock.Internal.Types.WebStateT
                                        ()
                                        Server.MySession
                                        Server.BlockChainState
                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                           GHC.Types.IO)))
                                  ()
                                  Web.Spock.Internal.Wire.SpockMethod>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  (Web.Spock.Core.LiftHooked
                                     ()
                                     (Web.Spock.Internal.Types.WebStateT
                                        ()
                                        Server.MySession
                                        Server.BlockChainState
                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                           GHC.Types.IO)))
                                  (Web.Spock.Internal.Types.WebStateT
                                     ()
                                     Server.MySession
                                     Server.BlockChainState
                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                        GHC.Types.IO))>_R
                               <()>_N))
                     (Trans
                          (Sym (Web.Routing.Router.N:RegistryT[0]
                                    <Web.Spock.Internal.Wire.ActionCtxT
                                       ()
                                       (Web.Spock.Internal.Types.WebStateT
                                          ()
                                          Server.MySession
                                          Server.BlockChainState
                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO))>_N
                                    <()>_N
                                    <Network.Wai.Application -> Network.Wai.Application>_N
                                    <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                (Web.Spock.Core.LiftHooked
                                                                                   ()
                                                                                   (Web.Spock.Internal.Types.WebStateT
                                                                                      ()
                                                                                      Server.MySession
                                                                                      Server.BlockChainState
                                                                                      (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                         GHC.Types.IO)))
                                                                                (Web.Spock.Internal.Types.WebStateT
                                                                                   ()
                                                                                   Server.MySession
                                                                                   Server.BlockChainState
                                                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                      GHC.Types.IO))>_N)
                          (Sym (Web.Spock.Core.N:SpockCtxT[0]
                                    <()>_N
                                    <Web.Spock.Internal.Types.WebStateT
                                       ()
                                       Server.MySession
                                       Server.BlockChainState
                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                          GHC.Types.IO)>_N)) <()>_N)) -}
61a5f9b769846b389670f7a17db3683c
  app1 ::
    Web.Routing.SafeRouting.PathInternal '[]
    -> Web.Routing.Router.RegistryState
         (Web.Spock.Internal.Wire.ActionCtxT
            ()
            (Web.Spock.Internal.Types.WebStateT
               ()
               Server.MySession
               Server.BlockChainState
               (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
         ()
         Web.Spock.Internal.Wire.SpockMethod
    -> Control.Monad.Trans.Reader.ReaderT
         (Web.Spock.Core.LiftHooked
            ()
            (Web.Spock.Internal.Types.WebStateT
               ()
               Server.MySession
               Server.BlockChainState
               (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
         (Web.Spock.Internal.Types.WebStateT
            ()
            Server.MySession
            Server.BlockChainState
            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
         ((),
          Web.Routing.Router.RegistryState
            (Web.Spock.Internal.Wire.ActionCtxT
               ()
               (Web.Spock.Internal.Types.WebStateT
                  ()
                  Server.MySession
                  Server.BlockChainState
                  (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
            ()
            Web.Spock.Internal.Wire.SpockMethod,
          [Network.Wai.Application -> Network.Wai.Application])
  {- Arity: 2,
     Unfolding: (Web.Spock.Core.$fMonadSpockCtxT3
                   @ ()
                   @ (Web.Spock.Internal.Types.WebStateT
                        ()
                        Server.MySession
                        Server.BlockChainState
                        (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                   (Web.Spock.Internal.Monad.$fHasSpockt_$s$fMonadWebStateT
                      @ ()
                      @ Server.MySession
                      @ Server.BlockChainState)
                   @ ()
                   @ ()
                   Server.app10
                     `cast`
                   (Trans
                        (Web.Spock.Core.N:SpockCtxT[0]
                             <()>_N
                             <Web.Spock.Internal.Types.WebStateT
                                ()
                                Server.MySession
                                Server.BlockChainState
                                (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)>_N)
                        (Web.Routing.Router.N:RegistryT[0]
                             <Web.Spock.Internal.Wire.ActionCtxT
                                ()
                                (Web.Spock.Internal.Types.WebStateT
                                   ()
                                   Server.MySession
                                   Server.BlockChainState
                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                      GHC.Types.IO))>_N
                             <()>_N
                             <Network.Wai.Application -> Network.Wai.Application>_N
                             <Web.Spock.Internal.Wire.SpockMethod>_N <Control.Monad.Trans.Reader.ReaderT
                                                                        (Web.Spock.Core.LiftHooked
                                                                           ()
                                                                           (Web.Spock.Internal.Types.WebStateT
                                                                              ()
                                                                              Server.MySession
                                                                              Server.BlockChainState
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)))
                                                                        (Web.Spock.Internal.Types.WebStateT
                                                                           ()
                                                                           Server.MySession
                                                                           Server.BlockChainState
                                                                           (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                              GHC.Types.IO))>_N) <()>_N)
                   Server.app2
                     `cast`
                   (Trans
                        (Web.Spock.Core.N:SpockCtxT[0]
                             <()>_N
                             <Web.Spock.Internal.Types.WebStateT
                                ()
                                Server.MySession
                                Server.BlockChainState
                                (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)>_N)
                        (Web.Routing.Router.N:RegistryT[0]
                             <Web.Spock.Internal.Wire.ActionCtxT
                                ()
                                (Web.Spock.Internal.Types.WebStateT
                                   ()
                                   Server.MySession
                                   Server.BlockChainState
                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                      GHC.Types.IO))>_N
                             <()>_N
                             <Network.Wai.Application -> Network.Wai.Application>_N
                             <Web.Spock.Internal.Wire.SpockMethod>_N <Control.Monad.Trans.Reader.ReaderT
                                                                        (Web.Spock.Core.LiftHooked
                                                                           ()
                                                                           (Web.Spock.Internal.Types.WebStateT
                                                                              ()
                                                                              Server.MySession
                                                                              Server.BlockChainState
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)))
                                                                        (Web.Spock.Internal.Types.WebStateT
                                                                           ()
                                                                           Server.MySession
                                                                           Server.BlockChainState
                                                                           (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                              GHC.Types.IO))>_N) <()>_N)) -}
c11ec3557c8ac1c9d825bc742140c257
  app10 ::
    Web.Spock.Core.SpockCtxT
      ()
      (Web.Spock.Internal.Types.WebStateM
         () Server.MySession Server.BlockChainState)
      ()
  {- Unfolding: (Web.Spock.hookRoute'
                   @ '[]
                   @ 'Web.Routing.Combinators.Open
                   @ ()
                   @ ()
                   @ Server.MySession
                   @ Server.BlockChainState
                   Data.HVect.$WRNil `cast` (Sym (Data.HVect.N:HasRep[0]) <'[]>_N)
                   Server.app9
                   Server.app18
                   Server.app11
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                  <Web.Spock.Internal.Wire.RequestInfo ()>_R
                                  <()>_N
                                  <Web.Spock.Internal.Wire.ResponseState>_N
                                  <Web.Spock.Internal.Types.WebStateM
                                     () Server.MySession Server.BlockChainState>_R
                                  <Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt ()>_N))
                        (Trans
                             (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Web.Spock.Internal.Wire.ActionInterupt>_N
                                       <Control.Monad.Trans.RWS.Strict.RWST
                                          (Web.Spock.Internal.Wire.RequestInfo ())
                                          ()
                                          Web.Spock.Internal.Wire.ResponseState
                                          (Web.Spock.Internal.Types.WebStateM
                                             () Server.MySession Server.BlockChainState)>_R
                                       <()>_N))
                             (Trans
                                  (Sym (Web.Spock.Internal.Wire.N:ActionCtxT[0]
                                            <()>_N
                                            <Web.Spock.Internal.Types.WebStateM
                                               ()
                                               Server.MySession
                                               Server.BlockChainState>_N) <()>_N)
                                  (Sub (Sym (Data.HVect.D:R:HVectElim[0]
                                                 <Web.Spock.Internal.Wire.ActionCtxT
                                                    ()
                                                    (Web.Spock.Internal.Types.WebStateM
                                                       () Server.MySession Server.BlockChainState)
                                                    ()>_N))))))) -}
89c2bb4cd70f539e0ef7bc0a58c3bc6e
  app11 ::
    Web.Spock.Internal.Wire.RequestInfo ()
    -> Web.Spock.Internal.Wire.ResponseState
    -> Web.Spock.Internal.Types.WebStateT
         ()
         Server.MySession
         Server.BlockChainState
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
         (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
          Web.Spock.Internal.Wire.ResponseState, ())
  {- Arity: 2,
     Unfolding: (\ (r1 :: Web.Spock.Internal.Wire.RequestInfo ())
                   (s1 :: Web.Spock.Internal.Wire.ResponseState) ->
                 let {
                   eta :: Web.Spock.Internal.Types.WebStateM
                            ()
                            Server.MySession
                            Server.BlockChainState
                            (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                             Web.Spock.Internal.Wire.ResponseState, ())
                   = Web.Spock.Internal.CoreAction.$wsetRawHeaderUnsafe
                       @ (Web.Spock.Internal.Types.WebStateM
                            () Server.MySession Server.BlockChainState)
                       @ ()
                       (Server.$s$fMonadIOActionCtxT_$s$fMonadIOWebStateT
                          @ ()
                          @ Server.MySession
                          @ Server.BlockChainState)
                       Server.app17
                       Server.app16
                       s1
                 } in
                 (\ (eta2 :: Web.Spock.Internal.Types.WebState
                               () Server.MySession Server.BlockChainState) ->
                  let {
                    ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                            GHC.Types.IO
                            (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                             Web.Spock.Internal.Wire.ResponseState, ())
                    = eta
                        `cast`
                      (Trans
                           (Web.Spock.Internal.Types.N:WebStateT[0]
                                <()>_N
                                <Server.MySession>_N
                                <Server.BlockChainState>_N <Control.Monad.Trans.Resource.Internal.ResourceT
                                                              GHC.Types.IO>_N <(Data.Either.Either
                                                                                  Web.Spock.Internal.Wire.ActionInterupt
                                                                                  (),
                                                                                Web.Spock.Internal.Wire.ResponseState,
                                                                                ())>_N)
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Web.Spock.Internal.Types.WebState
                                   () Server.MySession Server.BlockChainState>_R
                                <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                  Web.Spock.Internal.Wire.ResponseState, ())>_N))
                        eta2
                  } in
                  (\ (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                              <GHC.Types.IO>_R
                              <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                Web.Spock.Internal.Wire.ResponseState, ())>_N)
                           r)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                               Web.Spock.Internal.Wire.ResponseState, ())>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,) a1 s' w1 ->
                   case a1 of wild1 {
                     Data.Either.Left e1 -> (# ipv, (wild1, s', GHC.Tuple.()) #)
                     Data.Either.Right x
                     -> (# ipv,
                           (Server.app6,
                            case s' of wild2 { Web.Spock.Internal.Wire.ResponseState ds2 ds3 ds4 ds5 ->
                            Web.Spock.Internal.Wire.ResponseState
                              ds2
                              ds3
                              ds4
                              Server.app_val2
                                `cast`
                              (Sym (Web.Spock.Internal.Wire.N:ResponseBody[0])) },
                            GHC.Tuple.()) #) } } })
                    `cast`
                  (Trans
                       (<GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Data.Either.Either
                                          Web.Spock.Internal.Wire.ActionInterupt (),
                                        Web.Spock.Internal.Wire.ResponseState, ())>_R))
                       (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <GHC.Types.IO>_R
                                 <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                   Web.Spock.Internal.Wire.ResponseState, ())>_N))))
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Web.Spock.Internal.Types.WebState
                                   () Server.MySession Server.BlockChainState>_R
                                <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                  Web.Spock.Internal.Wire.ResponseState, ())>_N))
                      (Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                <()>_N
                                <Server.MySession>_N
                                <Server.BlockChainState>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                                               GHC.Types.IO>_N <(Data.Either.Either
                                                                                   Web.Spock.Internal.Wire.ActionInterupt
                                                                                   (),
                                                                                 Web.Spock.Internal.Wire.ResponseState,
                                                                                 ())>_N))) -}
e7f733c34b51cb4b109d881aa77a4424
  app12 :: Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case Lib.$w$ctoJSON
                        Server.app15
                        Server.app14
                        Server.app15
                        Server.app13
                        Server.app15
                        (GHC.Types.[] @ GHC.Types.Char) of ww7 { Unit# ww8 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Object ww8) }) -}
bf98d93d7bb8a46daff0c6da47bff2df
  app13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "initial data"#) -}
97a8595562fa888fb3d4a581149acc67
  app14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "0"#) -}
1e591f2deb471438faaf4d26c997e2ed
  app15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
56e775fd6ba43ec1d4ece68027fd1458
  app16 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "application/json; charset=utf-8"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d0633c2d9af10bd3f2d2a8c70617dddc
  app17 ::
    Data.CaseInsensitive.Internal.CI
      Data.ByteString.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Content-Type"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Text.Encoding.$wencodeUtf8
                        ww1
                        ww2
                        ww3 of dt { Data.ByteString.Internal.PS ipv ipv1 ipv2 ipv3 ->
                 case Data.CaseInsensitive.Internal.$wfoldCaseBS
                        ipv
                        ipv1
                        ipv2
                        ipv3 of dt1 { Data.ByteString.Internal.PS ipv4 ipv5 ipv6 ipv7 ->
                 Data.CaseInsensitive.Internal.CI
                   @ Data.ByteString.Internal.ByteString
                   dt
                   dt1 } } }) -}
d211a75726b1f7da7f3b4a14253fbdf6
  app18 ::
    Web.Routing.Combinators.Path '[] 'Web.Routing.Combinators.Open
  {- Unfolding: (Web.Routing.Combinators.static Server.app19) -}
a2e36dc513f08043dd72dc10345b09a9
  app19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "block"#) -}
8c21ec8ab5fad7853d0888a954cd7de8
  app2 ::
    Web.Spock.Core.SpockCtxT
      ()
      (Web.Spock.Internal.Types.WebStateM
         () Server.MySession Server.BlockChainState)
      ()
  {- Unfolding: (Web.Spock.hookRoute'
                   @ '[]
                   @ 'Web.Routing.Combinators.Open
                   @ ()
                   @ ()
                   @ Server.MySession
                   @ Server.BlockChainState
                   Data.HVect.$WRNil `cast` (Sym (Data.HVect.N:HasRep[0]) <'[]>_N)
                   Server.app9
                   Server.app7
                   Server.app3
                     `cast`
                   (Trans
                        (<Web.Spock.Internal.Wire.RequestInfo ()>_R
                         ->_R <Web.Spock.Internal.Wire.ResponseState>_R
                         ->_R Trans
                                  (<Web.Spock.Internal.Types.WebState
                                      () Server.MySession Server.BlockChainState>_R
                                   ->_R Trans
                                            (<GHC.IORef.IORef
                                                Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Either.Either
                                                               Web.Spock.Internal.Wire.ActionInterupt
                                                               (),
                                                             Web.Spock.Internal.Wire.ResponseState,
                                                             ())>_R))
                                            (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                      <GHC.Types.IO>_R
                                                      <(Data.Either.Either
                                                          Web.Spock.Internal.Wire.ActionInterupt (),
                                                        Web.Spock.Internal.Wire.ResponseState,
                                                        ())>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <Web.Spock.Internal.Types.WebState
                                                    () Server.MySession Server.BlockChainState>_R
                                                 <Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO>_R
                                                 <(Data.Either.Either
                                                     Web.Spock.Internal.Wire.ActionInterupt (),
                                                   Web.Spock.Internal.Wire.ResponseState, ())>_N))
                                       (Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                                 <()>_N
                                                 <Server.MySession>_N
                                                 <Server.BlockChainState>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                GHC.Types.IO>_N <(Data.Either.Either
                                                                                                    Web.Spock.Internal.Wire.ActionInterupt
                                                                                                    (),
                                                                                                  Web.Spock.Internal.Wire.ResponseState,
                                                                                                  ())>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                       <Web.Spock.Internal.Wire.RequestInfo ()>_R
                                       <()>_N
                                       <Web.Spock.Internal.Wire.ResponseState>_N
                                       <Web.Spock.Internal.Types.WebStateT
                                          ()
                                          Server.MySession
                                          Server.BlockChainState
                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO)>_R
                                       <Data.Either.Either
                                          Web.Spock.Internal.Wire.ActionInterupt ()>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Web.Spock.Internal.Wire.ActionInterupt>_N
                                            <Control.Monad.Trans.RWS.Strict.RWST
                                               (Web.Spock.Internal.Wire.RequestInfo ())
                                               ()
                                               Web.Spock.Internal.Wire.ResponseState
                                               (Web.Spock.Internal.Types.WebStateT
                                                  ()
                                                  Server.MySession
                                                  Server.BlockChainState
                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                     GHC.Types.IO))>_R
                                            <()>_N))
                                  (Trans
                                       (Sym (Web.Spock.Internal.Wire.N:ActionCtxT[0]
                                                 <()>_N
                                                 <Web.Spock.Internal.Types.WebStateT
                                                    ()
                                                    Server.MySession
                                                    Server.BlockChainState
                                                    (Control.Monad.Trans.Resource.Internal.ResourceT
                                                       GHC.Types.IO)>_N) <()>_N)
                                       (Sub (Sym (Data.HVect.D:R:HVectElim[0]
                                                      <Web.Spock.Internal.Wire.ActionCtxT
                                                         ()
                                                         (Web.Spock.Internal.Types.WebStateM
                                                            ()
                                                            Server.MySession
                                                            Server.BlockChainState)
                                                         ()>_N)))))))) -}
eb116001351baa4e482e02c53b9d4478
  app3 ::
    Web.Spock.Internal.Wire.RequestInfo ()
    -> Web.Spock.Internal.Wire.ResponseState
    -> Web.Spock.Internal.Types.WebState
         () Server.MySession Server.BlockChainState
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
           Web.Spock.Internal.Wire.ResponseState, ()) #)
  {- Arity: 5,
     Unfolding: (\ (r1 :: Web.Spock.Internal.Wire.RequestInfo ())
                   (s1 :: Web.Spock.Internal.Wire.ResponseState)
                   (eta :: Web.Spock.Internal.Types.WebState
                             () Server.MySession Server.BlockChainState)
                   (eta1 :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta of wild { Web.Spock.Internal.Types.WebState ds1 ds2 ds3 ds4 ->
                 case ds3 of wild1 { Server.BlockChainState chain ->
                 case ((((Web.Spock.Internal.Wire.$fMonadIOActionCtxT1
                            @ ()
                            @ (Web.Spock.Internal.Types.WebStateT
                                 ()
                                 Server.MySession
                                 Server.BlockChainState
                                 (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                            (Server.$s$fMonadIOActionCtxT_$s$fMonadIOWebStateT
                               @ ()
                               @ Server.MySession
                               @ Server.BlockChainState)
                            @ [Lib.Block]
                            (GHC.STRef.readSTRef1
                               @ GHC.Prim.RealWorld
                               @ [Lib.Block]
                               chain `cast` (GHC.IORef.N:IORef[0] <[Lib.Block]>_N))
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <[Lib.Block]>_R)))
                           `cast`
                         (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                              <Web.Spock.Internal.Wire.RequestInfo ()>_R
                              <()>_N
                              <Web.Spock.Internal.Wire.ResponseState>_N
                              <Web.Spock.Internal.Types.WebStateT
                                 ()
                                 Server.MySession
                                 Server.BlockChainState
                                 (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)>_R
                              <Data.Either.Either
                                 Web.Spock.Internal.Wire.ActionInterupt [Lib.Block]>_N)
                           r1
                           s1)
                          `cast`
                        (Trans
                             (Web.Spock.Internal.Types.N:WebStateT[0]
                                  <()>_N
                                  <Server.MySession>_N
                                  <Server.BlockChainState>_N <Control.Monad.Trans.Resource.Internal.ResourceT
                                                                GHC.Types.IO>_N <(Data.Either.Either
                                                                                    Web.Spock.Internal.Wire.ActionInterupt
                                                                                    [Lib.Block],
                                                                                  Web.Spock.Internal.Wire.ResponseState,
                                                                                  ())>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Web.Spock.Internal.Types.WebState
                                     () Server.MySession Server.BlockChainState>_R
                                  <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                  <(Data.Either.Either
                                      Web.Spock.Internal.Wire.ActionInterupt [Lib.Block],
                                    Web.Spock.Internal.Wire.ResponseState, ())>_N))
                          wild)
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <GHC.Types.IO>_R
                            <(Data.Either.Either
                                Web.Spock.Internal.Wire.ActionInterupt [Lib.Block],
                              Web.Spock.Internal.Wire.ResponseState, ())>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Either.Either
                               Web.Spock.Internal.Wire.ActionInterupt [Lib.Block],
                             Web.Spock.Internal.Wire.ResponseState, ())>_R)
                        eta2 of ds7 { (#,#) ipv ipv1 ->
                 case ipv1 of wild2 { (,,) b1 s'' w' ->
                 case b1 of wild3 {
                   Data.Either.Left e1
                   -> (# ipv,
                         (Data.Either.Left @ Web.Spock.Internal.Wire.ActionInterupt @ () e1,
                          s'', GHC.Tuple.()) #)
                   Data.Either.Right x
                   -> (# ipv,
                         (Server.app6,
                          case s'' of wild4 { Web.Spock.Internal.Wire.ResponseState ds ds8 ds9 ds10 ->
                          case Server.app5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Text.Encoding.$wencodeUtf8
                                 ww1
                                 ww2
                                 ww3 of v2 { Data.ByteString.Internal.PS ipv2 ipv3 ipv4 ipv5 ->
                          case Server.app4 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                          case Data.Text.Encoding.$wencodeUtf8
                                 ww5
                                 ww6
                                 ww7 of dt { Data.ByteString.Internal.PS ipv6 ipv7 ipv8 ipv9 ->
                          case Data.CaseInsensitive.Internal.$wfoldCaseBS
                                 ipv6
                                 ipv7
                                 ipv8
                                 ipv9 of dt1 { Data.ByteString.Internal.PS ipv10 ipv11 ipv12 ipv13 ->
                          case Data.HashMap.Base.insert
                                 @ (Data.CaseInsensitive.Internal.CI
                                      Data.ByteString.Internal.ByteString)
                                 @ Data.ByteString.Internal.ByteString
                                 Web.Spock.Internal.CoreAction.$s$fEqCI
                                 Web.Spock.Internal.CoreAction.$s$fHashableCI
                                 (Data.CaseInsensitive.Internal.CI
                                    @ Data.ByteString.Internal.ByteString
                                    dt
                                    dt1)
                                 v2
                                 ds of dt2 { DEFAULT ->
                          let {
                            val2 :: Data.ByteString.Lazy.Internal.ByteString
                            = Data.ByteString.Builder.toLazyByteString
                                (case x of wild5 {
                                   []
                                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                                        `cast`
                                      (Trans
                                           (forall (r :: <*>_N).
                                            <Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.ByteString.Builder.Internal.BuildSignal
                                                             r>_R))
                                           (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                                   : x1 xs
                                   -> let {
                                        ds11 :: Data.ByteString.Builder.Internal.Builder
                                        = Data.Aeson.Encoding.Builder.encodeToBuilder
                                            (Lib.$fToJSONBlock1 x1)
                                              `cast`
                                            (Data.Tagged.N:Tagged[0]
                                                 <*>_N
                                                 <Data.Aeson.Types.Generic.True>_P
                                                 <Data.Aeson.Types.Internal.Value>_R)
                                      } in
                                      let {
                                        ds12 :: Data.Aeson.Encoding.Internal.Encoding'
                                                  Data.Aeson.Types.Internal.Value
                                        = Server.app_go xs
                                      } in
                                      (\ @ r
                                         (eta3 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                                       let {
                                         w :: Data.ByteString.Builder.Internal.BuildStep r
                                         = ds11
                                             `cast`
                                           (Data.ByteString.Builder.Internal.N:Builder[0])
                                             @ r
                                             (ds12
                                                `cast`
                                              (Trans
                                                   (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                        <Data.Aeson.Types.Internal.Value>_P)
                                                   (Data.ByteString.Builder.Internal.N:Builder[0]))
                                                @ r
                                                (Data.Aeson.Encoding.Internal.closeBracket1
                                                   @ r
                                                   eta3)
                                                  `cast`
                                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                                  r>_R)))
                                       } in
                                       \ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                         (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case w1 of ww8 { Data.ByteString.Builder.Internal.BufferRange ww9 ww10 ->
                                       Data.Aeson.Encoding.Internal.$wopenBracket
                                         @ r
                                         w
                                         ww9
                                         ww10
                                         w2 })
                                        `cast`
                                      (Trans
                                           (forall (r :: <*>_N).
                                            <Data.ByteString.Builder.Internal.BuildStep r>_R
                                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.ByteString.Builder.Internal.BuildSignal
                                                             r>_R))
                                           (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) })
                          } in
                          Web.Spock.Internal.Wire.ResponseState
                            dt2
                            ds8
                            ds9
                            (\ (status :: Network.HTTP.Types.Status.Status)
                               (headers :: Network.HTTP.Types.Header.ResponseHeaders) ->
                             Network.Wai.responseLBS status headers val2)
                              `cast`
                            (Sym (Web.Spock.Internal.Wire.N:ResponseBody[0])) } } } } } } },
                          GHC.Tuple.()) #) } } } } }) -}
a9d63f046b471f9ba63182dc1bb905d0
  app4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Content-Type"#) -}
f0eb2987ec22c346c759e16bad312dc7
  app5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "application/json; charset=utf-8"#) -}
209362fb1e37fe3b6f90bf32cc950e03
  app6 ::
    Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt ()
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Left
                   @ Web.Spock.Internal.Wire.ActionInterupt
                   @ ()
                   Web.Spock.Internal.Wire.ActionDone) -}
d4424d4382da323dc77b0b8e1cefae8e
  app7 ::
    Web.Routing.Combinators.Path '[] 'Web.Routing.Combinators.Open
  {- Unfolding: (Web.Routing.Combinators.static Server.app8) -}
8d502a11c2310a712a42830129f1e36a
  app8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain"#) -}
52a4a23e587fe9bded76448270f05cc7
  app9 :: Web.Spock.Internal.Wire.SpockMethod
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Web.Spock.Internal.Wire.MethodStandard
                   Network.HTTP.Types.Method.GET
                     `cast`
                   (Sym (Web.Spock.Internal.Wire.N:HttpMethod[0]))) -}
91ee61f58be828af2c8ed5bc1db06ab4
  app_go ::
    [Lib.Block]
    -> Data.Aeson.Encoding.Internal.Encoding'
         Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
46b2efdc091c443d071421a6fe30a483
  app_val1 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Server.app12) -}
bff25ec7d3dbf2e553a66c906d042ab0
  app_val2 ::
    Network.HTTP.Types.Status.Status
    -> Network.HTTP.Types.Header.ResponseHeaders
    -> Network.Wai.Internal.Response
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (status :: Network.HTTP.Types.Status.Status)
                   (headers :: Network.HTTP.Types.Header.ResponseHeaders) ->
                 Network.Wai.responseLBS status headers Server.app_val1) -}
e6082a0a81b9ff9f4330cbba4610a69b
  blockChainState ::
    Server.BlockChainState -> GHC.IORef.IORef [Lib.Block]
  RecSel Left Server.BlockChainState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Server.BlockChainState) ->
                 case ds of wild { Server.BlockChainState ds1 -> ds1 }) -}
7f5e48d044e35018fb71e288b7f773d2
  getBlockChain ::
    (Web.Spock.Internal.Types.SpockState m
     Data.Type.Equality.~ Server.BlockChainState,
     Control.Monad.IO.Class.MonadIO m,
     Web.Spock.Internal.Types.HasSpock m) =>
    m [Lib.Block]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S(LC(C(S))LLL)L),U(1*U(A,1*C1(C1(U)),A,A,A),1*U)><L,1*U(A,1*U,A,A)>,
     Unfolding: (\ @ (m :: * -> *)
                   ($d~ :: Web.Spock.Internal.Types.SpockState m
                           Data.Type.Equality.~ Server.BlockChainState)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dHasSpock :: Web.Spock.Internal.Types.HasSpock m) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Web.Spock.Internal.Types.SpockState m)
                        @ Server.BlockChainState
                        $d~
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Web.Spock.Internal.Types.SpockState
                                                m>_N <Server.BlockChainState>_N) of cobox0 { DEFAULT ->
                 let {
                   lvl21 :: GHC.Types.IO [Lib.Block] -> m [Lib.Block]
                   = Control.Monad.IO.Class.liftIO @ m $dMonadIO @ [Lib.Block]
                 } in
                 GHC.Base.>>=
                   @ m
                   (Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO)
                   @ Server.BlockChainState
                   @ [Lib.Block]
                   (Web.Spock.Internal.Types.getState @ m $dHasSpock)
                     `cast`
                   (<m>_R cobox0)
                   (\ (ds :: Server.BlockChainState) ->
                    case ds of wild { Server.BlockChainState chain ->
                    lvl21
                      (GHC.STRef.readSTRef1
                         @ GHC.Prim.RealWorld
                         @ [Lib.Block]
                         chain `cast` (GHC.IORef.N:IORef[0] <[Lib.Block]>_N))
                        `cast`
                      (Sym (GHC.Types.N:IO[0] <[Lib.Block]>_R)) }) }) -}
df2e6b41215999dcdbaa3abfa907da2c
  runServer :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Server.runServer1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
491b60e7b8f11fb0cd7bae453813e55b
  runServer1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Log.Logger.alertM4
                        Server.addDebug2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { System.Log.Logger.Logger ww1 ww2 ww3 ->
                 case System.Log.Logger.$wlogL
                        ww1
                        ww2
                        ww3
                        System.Log.DEBUG
                        Server.runServer8
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newMutVar#
                        @ [Lib.Block]
                        @ GHC.Prim.RealWorld
                        Server.runServer7
                        ipv2 of ds { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.atomically#
                        @ (Web.Spock.Internal.SessionVault.SessionVault
                             (Web.Spock.Internal.Types.Session
                                () Server.MySession Server.BlockChainState))
                        (Web.Spock.Internal.SessionVault.newSessionVault1
                           @ (Web.Spock.Internal.Types.Session
                                () Server.MySession Server.BlockChainState))
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case Web.Spock.Internal.SessionVault.newStmSessionStore2
                        @ Server.BlockChainState
                        @ Server.MySession
                        @ ()
                        ipv7
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 case Web.Spock.Core.runSpock1
                        Server.runServer6
                        (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         Web.Spock.$wspock
                           @ ()
                           @ Server.MySession
                           @ Server.BlockChainState
                           (Server.BlockChainState
                              (GHC.STRef.STRef @ GHC.Prim.RealWorld @ [Lib.Block] ipv5)
                                `cast`
                              (Sym (GHC.IORef.N:IORef[0]) <[Lib.Block]>_N))
                           Web.Spock.Internal.Types.$WPCNoDatabase
                           (Web.Spock.Internal.Types.SessionCfg
                              @ ()
                              @ Server.MySession
                              @ Server.BlockChainState
                              Web.Spock.Config.defaultSessionCfg5
                              Web.Spock.Config.defaultSessionCfg4
                                `cast`
                              (Trans
                                   (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                                   (Sym (Data.Time.Clock.UTC.N:NominalDiffTime[0])))
                              Web.Spock.Config.defaultSessionCfg3
                              GHC.Types.True
                              Server.EmptySession
                              (Web.Spock.Internal.Types.SessionStoreInstance
                                 @ (Web.Spock.Internal.Types.Session
                                      () Server.MySession Server.BlockChainState)
                                 @ GHC.Conc.Sync.STM
                                 GHC.Conc.Sync.$fMonadSTM
                                 GHC.Conc.Sync.$fFunctorSTM
                                 GHC.Conc.Sync.$fApplicativeSTM
                                 ipv9)
                              Web.Spock.Config.defaultSessionCfg2
                                `cast`
                              (Trans
                                   (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                                   (Sym (Data.Time.Clock.UTC.N:NominalDiffTime[0])))
                              (Web.Spock.Config.defaultSessionHooks @ Server.MySession))
                           Web.Spock.Config.defaultSpockCfg4
                           Web.Spock.Config.errorHandler
                           GHC.Types.False
                           Web.Spock.Config.defaultSpockCfg3
                           Web.Spock.Config.defaultSpockCfg2
                           Server.app1
                             `cast`
                           (Trans
                                (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                          <Web.Routing.SafeRouting.PathInternal '[]>_R
                                          <[Network.Wai.Application -> Network.Wai.Application]>_N
                                          <Web.Routing.Router.RegistryState
                                             (Web.Spock.Internal.Wire.ActionCtxT
                                                ()
                                                (Web.Spock.Internal.Types.WebStateT
                                                   ()
                                                   Server.MySession
                                                   Server.BlockChainState
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      GHC.Types.IO)))
                                             ()
                                             Web.Spock.Internal.Wire.SpockMethod>_N
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (Web.Spock.Core.LiftHooked
                                                ()
                                                (Web.Spock.Internal.Types.WebStateT
                                                   ()
                                                   Server.MySession
                                                   Server.BlockChainState
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      GHC.Types.IO)))
                                             (Web.Spock.Internal.Types.WebStateT
                                                ()
                                                Server.MySession
                                                Server.BlockChainState
                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO))>_R
                                          <()>_N))
                                (Trans
                                     (Sym (Web.Routing.Router.N:RegistryT[0]
                                               <Web.Spock.Internal.Wire.ActionCtxT
                                                  ()
                                                  (Web.Spock.Internal.Types.WebStateT
                                                     ()
                                                     Server.MySession
                                                     Server.BlockChainState
                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                        GHC.Types.IO))>_N
                                               <()>_N
                                               <Network.Wai.Application
                                                -> Network.Wai.Application>_N
                                               <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                           (Web.Spock.Core.LiftHooked
                                                                                              ()
                                                                                              (Web.Spock.Internal.Types.WebStateT
                                                                                                 ()
                                                                                                 Server.MySession
                                                                                                 Server.BlockChainState
                                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                    GHC.Types.IO)))
                                                                                           (Web.Spock.Internal.Types.WebStateT
                                                                                              ()
                                                                                              Server.MySession
                                                                                              Server.BlockChainState
                                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                 GHC.Types.IO))>_N)
                                     (Sym (Web.Spock.Core.N:SpockCtxT[0]
                                               <()>_N
                                               <Web.Spock.Internal.Types.WebStateT
                                                  ()
                                                  Server.MySession
                                                  Server.BlockChainState
                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                     GHC.Types.IO)>_N)) <()>_N))
                           w2)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <Network.Wai.Middleware>_R))
                        ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                 case System.Log.Logger.alertM4
                        Server.addDebug2
                        ipv10 of ds6 { (#,#) ipv12 ipv13 ->
                 case ipv13 of ww4 { System.Log.Logger.Logger ww5 ww6 ww7 ->
                 System.Log.Logger.$wlogL
                   ww5
                   ww6
                   ww7
                   System.Log.DEBUG
                   Server.runServer2
                   ipv12 } } } } } } } } }) -}
e2d26187c547a6ec5cbd7cc2f1a9cfaf
  runServer10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Starting Server"#) -}
0b375b7f26922d9289228ece790f1125
  runServer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   Server.runServer3) -}
66298f28fab46534f49cab2969dc3078
  runServer3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Server.runServer5
                   Server.runServer4) -}
5ac489f5bf4e68b25bd72d6f766a0c82
  runServer4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8a8c8b4a441c28ee376f9377ab56edc7
  runServer5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Server Running on 8080"#) -}
73ca9ac26cc401f0f7efccd45bdcae9d
  runServer6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8080#) -}
9f81780e56a8d226d11d56bd53e69533
  runServer7 :: [Lib.Block]
  {- Unfolding: (GHC.Types.:
                   @ Lib.Block
                   Lib.initialBlock
                   (GHC.Types.[] @ Lib.Block)) -}
ff52b59867a2f3b1774c1b62b7c0deaa
  runServer8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   Server.runServer9) -}
aad5a09569177d058f2e5e6c80d865f6
  runServer9 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Server.runServer10
                   Server.runServer4) -}
instance GHC.Generics.Generic [Server.BlockChainState]
  = Server.$fGenericBlockChainState
family instance GHC.Generics.Rep [Server.BlockChainState]
  = Server.Rep_BlockChainState
"SPEC/Server $fMonadIOResourceT @ IO" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                      GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ GHC.Types.IO
                                                           $dMonadIO
  = Server.$s$fMonadIOActionCtxT_$s$fMonadIOResourceT
"SPEC/Server $fMonadIOResourceT_$cliftIO @ IO" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                               GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cliftIO @ GHC.Types.IO
                                                                    $dMonadIO
  = Server.$s$fMonadIOActionCtxT_$s$fMonadIOResourceT_$cliftIO
"SPEC/Server $fMonadIOWebStateT _ _ _ @ (ResourceT IO)" [ALWAYS] forall @ conn
                                                                        @ sess
                                                                        @ st
                                                                        ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                           GHC.Types.IO))
  Web.Spock.Internal.Types.$fMonadIOWebStateT @ conn
                                              @ sess
                                              @ st
                                              @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO)
                                              $dMonadIO
  = Server.$s$fMonadIOActionCtxT_$s$fMonadIOWebStateT
      @ conn
      @ sess
      @ st
"SPEC/Server $fMonadIOWebStateT_$cp1MonadIO _ _ _ @ (ResourceT IO)" [ALWAYS] forall @ conn
                                                                                    @ sess
                                                                                    @ st
                                                                                    ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                    (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                       GHC.Types.IO))
  Web.Spock.Internal.Types.$fMonadIOWebStateT_$cp1MonadIO @ conn
                                                          @ sess
                                                          @ st
                                                          @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                               GHC.Types.IO)
                                                          $dMonadIO
  = Server.$s$fMonadIOActionCtxT_$s$fMonadIOWebStateT_$cp1MonadIO
      @ conn
      @ sess
      @ st
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

